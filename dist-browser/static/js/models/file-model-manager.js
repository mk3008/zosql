import{FileModel}from"./file-model.js";export class FileModelManager{constructor(){this.models=new Map,this.nameToIdMap=new Map,this.activeModelId=null,this.maxModels=20,this.autosaveEnabled=!0,this.autosaveInterval=3e4,this.persistenceKey="zosql_file_models",this.init()}init(){this.loadFromStorage(),this.setupAutosave(),console.log("[FileModelManager] Initialized")}createOrGetModel(e,t="",o={}){const s=this.nameToIdMap.get(e);if(s&&this.models.has(s)){const t=this.models.get(s);return console.log(`[FileModelManager] Reusing existing model for: ${e}`),t}const l=new FileModel(e,t,o);return this.addModel(l),console.log(`[FileModelManager] Created new model for: ${e} (${l.id})`),l}addModel(e){this.models.size>=this.maxModels&&this.removeOldestModel();const t=this.nameToIdMap.get(e.name);t&&this.removeModel(t),this.models.set(e.id,e),this.nameToIdMap.set(e.name,e.id),this.activeModelId||this.setActiveModel(e.id),this.saveToStorage()}removeOldestModel(){let e=null,t=Date.now();for(const o of this.models.values())!o.hasChanges()&&o.lastModified.getTime()<t&&(e=o,t=o.lastModified.getTime());if(!e)for(const o of this.models.values())o.lastModified.getTime()<t&&(e=o,t=o.lastModified.getTime());e&&(console.log(`[FileModelManager] Removing oldest model: ${e.name}`),this.removeModel(e.id))}removeModel(e){const t=this.models.get(e);return!!t&&(this.models.delete(e),this.nameToIdMap.delete(t.name),this.activeModelId===e&&(this.activeModelId=this.models.size>0?this.models.keys().next().value:null),t.destroy(),this.saveToStorage(),console.log(`[FileModelManager] Removed model: ${t.name} (${e})`),!0)}getModel(e){return this.models.get(e)}getModelByName(e){const t=this.nameToIdMap.get(e);return t?this.models.get(t):null}getActiveModel(){return this.activeModelId?this.models.get(this.activeModelId):null}setActiveModel(e){return!!this.models.has(e)&&(this.activeModelId=e,console.log(`[FileModelManager] Set active model: ${e}`),!0)}updateModelContent(e,t,o="user"){const s=this.models.get(e);if(!s)return!1;const l=s.updateContent(t,o);return l&&this.saveToStorage(),l}getAllModels(){return Array.from(this.models.values())}getModifiedModels(){return Array.from(this.models.values()).filter(e=>e.hasChanges())}hasUnsavedChanges(){return this.getModifiedModels().length>0}getStats(){const e=this.getAllModels();return{totalModels:e.length,modifiedModels:this.getModifiedModels().length,activeModelId:this.activeModelId,totalSize:e.reduce((e,t)=>e+t.metadata.size,0),memoryUsage:this.estimateMemoryUsage()}}estimateMemoryUsage(){let e=0;for(const t of this.models.values())e+=2*t.currentContent.length,e+=2*t.originalContent.length,e+=100*t.changeHistory.length;return e}saveToStorage(){if(this.autosaveEnabled)try{const e={models:Array.from(this.models.values()).map(e=>e.toJSON()),activeModelId:this.activeModelId,timestamp:(new Date).toISOString()};localStorage.setItem(this.persistenceKey,JSON.stringify(e)),console.log(`[FileModelManager] Saved ${e.models.length} models to storage`)}catch(e){console.warn("[FileModelManager] Failed to save to storage:",e)}}loadFromStorage(){try{const e=localStorage.getItem(this.persistenceKey);if(!e)return;const t=JSON.parse(e);if(!t.models)return;this.models.clear(),this.nameToIdMap.clear(),t.models.forEach(e=>{try{const t=FileModel.fromJSON(e);this.models.set(t.id,t),this.nameToIdMap.set(t.name,t.id)}catch(t){console.warn("[FileModelManager] Failed to restore model:",e.name,t)}}),t.activeModelId&&this.models.has(t.activeModelId)&&(this.activeModelId=t.activeModelId),console.log(`[FileModelManager] Loaded ${this.models.size} models from storage`)}catch(e){console.warn("[FileModelManager] Failed to load from storage:",e)}}setupAutosave(){this.autosaveEnabled&&this.autosaveInterval>0&&setInterval(()=>{this.saveToStorage()},this.autosaveInterval)}clearAll(){for(const e of this.models.values())e.destroy();this.models.clear(),this.nameToIdMap.clear(),this.activeModelId=null,this.saveToStorage(),console.log("[FileModelManager] Cleared all models")}exportModels(){return{models:Array.from(this.models.values()).map(e=>e.toJSON()),activeModelId:this.activeModelId,stats:this.getStats(),timestamp:(new Date).toISOString()}}destroy(){this.clearAll(),console.log("[FileModelManager] Destroyed")}}export const fileModelManager=new FileModelManager;