import{Logger}from"./modules/logger.js";import{SidebarManager}from"./modules/sidebar-manager.js";import{HeaderControls}from"./modules/header-controls.js";import{initializeUI}from"./modules/ui.js";import"./modules/toast.js";window.appState={schemaData:null,sharedCteData:null,lastValidQuery:null,currentSchemaData:null,lastSuccessfulParseResult:null,isIntelliSenseEnabled:!0,components:{headerShadow:null,workspacePanelShadow:null,centerPanelShadow:null,rightPanelShadow:null}};const logger=new Logger;async function initializeApp(){try{console.log("Starting zosql Browser (Shadow DOM Mode)");const e=new HeaderControls;window.headerControls=e,await waitForShadowComponents(),initializeShadowComponents(),initializeUI(),await initializeDatabase(),await initializeSchema(),console.log("Application initialized successfully")}catch(e){console.error("Application initialization failed:",e),showErrorToast("Failed to initialize application: "+e.message)}}async function waitForShadowComponents(){const e=["header-shadow","workspace-panel-shadow","center-panel-shadow","right-panel-shadow"].map(e=>new Promise(o=>{customElements.get(e)?o():customElements.whenDefined(e).then(o)}));await Promise.all(e),console.log("Shadow DOM components ready")}function initializeShadowComponents(){const e=document.getElementById("header-shadow"),o=document.getElementById("workspace-panel-shadow"),t=document.getElementById("center-panel-shadow"),n=document.getElementById("right-panel-shadow");window.appState.components={headerShadow:e,workspacePanelShadow:o,centerPanelShadow:t,rightPanelShadow:n},setupShadowComponentEventListeners(),console.log("Shadow DOM components initialized")}function setupShadowComponentEventListeners(){const e=document.getElementById("header-shadow"),o=document.getElementById("center-panel-shadow");e&&e.addEventListener("open-file",async e=>{if(console.log("[App] Received open-file event from header-shadow:",e.detail),window.headerControls){const{fileName:o,content:t}=e.detail;try{const e=await window.headerControls.formatSQL(t);await window.headerControls.openInNewTab(o,e),await window.headerControls.analyzeCTEDependencies(e,o),window.headerControls.showToast(`File "${o}" opened successfully`,"success"),console.log(`[App] Successfully processed file: ${o}`)}catch(e){console.error("[App] Failed to process file:",e),window.headerControls.showToast(`File processing error: ${e.message}`,"error")}}else console.error("[App] HeaderControls not available to handle file open")}),o&&(o.addEventListener("run-query",async e=>{console.log("[App] Run query event received:",e.detail),await handleRunQuery(e.detail)}),o.addEventListener("format-sql",async e=>{console.log("[App] Format SQL event received:",e.detail),await handleFormatSQL(e.detail)}),o.addEventListener("save-tab",async e=>{console.log("[App] Save tab event received:",e.detail),await handleSaveTab(e.detail)})),console.log("[App] Shadow DOM event listeners setup complete")}async function initializeDatabase(){try{console.log("Database initialization placeholder")}catch(e){console.error("Database initialization failed:",e)}}async function initializeSchema(){try{console.log("Schema initialization placeholder")}catch(e){console.error("Schema initialization failed:",e)}}async function handleRunQuery(e){const{tabId:o,tab:t}=e,n=window.appState.components.centerPanelShadow;if(n)try{const e=n.getMonacoEditor(o);if(!e)return void showErrorToast("Editor not ready");const t=e.getValue().trim();if(!t)return void showErrorToast("Please enter a SQL query");const a=n.shadowRoot.getElementById(`results-${o}`);a&&(a.innerHTML='<div class="results-loading">Executing query...</div>');const r=window.appState.components.rightPanelShadow;let s=t;if(r&&r.getValuesContent){const e=r.getValuesContent();if(e&&e.trim())try{const o=await fetch("/api/compose-cte",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({mainQuery:t,cteDefinitions:e})}),n=await o.json();if(!n.success)return console.error("[App] CTE composition failed:",n.error),void showErrorToast("CTE composition failed: "+n.error);s=n.composedQuery,console.log("[App] CTE composed successfully, added",n.cteCount,"CTEs")}catch(e){return console.error("[App] CTE composition error:",e),void showErrorToast("CTE composition error: "+e.message)}}const i=await fetch("/api/execute-query",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({sql:s})}),l=await i.json();l.success?(displayQueryResults(o,l),showSuccessToast(`Query executed successfully (${l.result.rows.length} rows)`)):(displayQueryError(o,l.error,l.sql||s),showErrorToast("Query execution failed: "+l.error))}catch(e){console.error("[App] Query execution error:",e),displayQueryError(o,e.message),showErrorToast("Network error during query execution: "+e.message)}else console.error("[App] Center panel shadow not available")}async function handleFormatSQL(e){const{tabId:o,tab:t}=e,n=window.appState.components.centerPanelShadow;if(n)try{const e=n.getMonacoEditor(o);if(!e)return void showErrorToast("Editor not ready");const t=e.getValue();if(!t||0===t.trim().length)return void showErrorToast("No SQL to format");const a=await fetch("/api/format-sql",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({sql:t})}),r=await a.json();r.success&&r.formattedSql?(e.setValue(r.formattedSql),showSuccessToast("SQL formatted successfully")):showErrorToast("SQL formatting failed: "+(r.error||"Unknown error"))}catch(e){console.error("[App] SQL formatting error:",e),showErrorToast("Network error during formatting: "+e.message)}else console.error("[App] Center panel shadow not available")}async function handleSaveTab(e){const{tabId:o,tab:t}=e;console.log("[App] Save tab:",o,t),showSuccessToast("Tab saved (placeholder)")}function displayQueryResults(e,o){const t=window.appState.components.centerPanelShadow.shadowRoot.getElementById(`results-${e}`);if(!t)return;const{result:n}=o;if(!n.rows||0===n.rows.length)return void(t.innerHTML='<div class="results-empty">No results returned</div>');let a='<div class="results-table-container">';a+='<table class="results-table">',n.fields&&n.fields.length>0&&(a+="<thead><tr>",n.fields.forEach(e=>{a+=`<th>${escapeHtml(e.name)}</th>`}),a+="</tr></thead>"),a+="<tbody>",n.rows.forEach(e=>{if(a+="<tr>",Array.isArray(e))n.fields.forEach((o,t)=>{const n=e[t];a+=`<td>${escapeHtml(String(n??""))}</td>`});else{const o=[],t={};n.fields.forEach(n=>{const a=n.name;t[a]?o.push("N/A"):(o.push(e[a]),t[a]=!0)}),o.forEach(e=>{a+=`<td>${escapeHtml(String(e??""))}</td>`})}a+="</tr>"}),a+="</tbody></table>",a+="</div>",a+=`<div class="results-info">Executed in ${n.executionTime}ms (${n.rows.length} rows)</div>`,t.innerHTML=a}function displayQueryError(e,o,t=null){const n=window.appState.components.centerPanelShadow.shadowRoot.getElementById(`results-${e}`);if(!n)return;let a="";t&&(a=`\n      <details style="margin-top: 10px;">\n        <summary style="cursor: pointer; color: #666;">Generated SQL (click to expand)</summary>\n        <pre style="background: #f5f5f5; padding: 10px; margin: 5px 0; border-radius: 4px; overflow: auto; white-space: pre-wrap;">${escapeHtml(t)}</pre>\n      </details>\n    `),n.innerHTML=`\n    <div class="results-error">\n      <strong>Query Error:</strong><br>\n      ${escapeHtml(o)}\n      ${a}\n    </div>\n  `}function escapeHtml(e){const o=document.createElement("div");return o.textContent=e,o.innerHTML}function showErrorToast(e){window.showToast?window.showToast(e,"error"):alert(e)}function showSuccessToast(e){window.showToast?window.showToast(e,"success"):console.log(e)}document.addEventListener("DOMContentLoaded",initializeApp),window.addEventListener("error",e=>{console.error("Global error:",e.error)}),window.addEventListener("unhandledrejection",e=>{console.error("Unhandled promise rejection:",e.reason)}),console.log("App.js loaded - Shadow DOM Mode");