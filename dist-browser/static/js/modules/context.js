export function initializeContext(){window.logger.info("Initializing context panel..."),updateContextPanel(),window.logger.info("Context panel initialized successfully")}export function updateContextPanel(){const t=document.getElementById("context-content"),n=document.getElementById("context-title");if(!t||!n)return;const e=window.appState.activePanel,s="left"===e?window.appState.activeLeftTabId:window.appState.activeRightTabId,o="left"===e?window.appState.leftTabs:window.appState.rightTabs;if(!s||!o.has(s))return n.textContent="Context Panel",void(t.innerHTML='<div class="context-placeholder">Open a tab to see context information</div>');const i=o.get(s),c=i.type,a=i.name;let l="[FILE]";switch(c){case"shared-cte":l="üî∂";break;case"private-cte":l="üîß";break;case"table":l="[TBL]";break;case"main-file":l="[FILE]";break;default:l="[QUERY]"}n.textContent=`${l} ${a} Context`,generateContextContent(i,t)}function generateContextContent(t,n){const e=t.content||"";let s="";if(s+=`\n    <div class="context-section">\n      <h4>Tab Information</h4>\n      <div class="context-item">\n        <strong>Name:</strong> ${t.name}\n      </div>\n      <div class="context-item">\n        <strong>Type:</strong> ${getTypeDescription(t.type)}\n      </div>\n      <div class="context-item">\n        <strong>Status:</strong> ${t.isModified?"Modified":"Saved"}\n      </div>\n      <div class="context-item">\n        <strong>Lines:</strong> ${e.split("\n").length}\n      </div>\n    </div>\n  `,e.trim()){const t=analyzeSqlContent(e);(t.tables.length>0||t.ctes.length>0||t.columns.length>0)&&(s+='\n        <div class="context-section">\n          <h4>SQL Analysis</h4>\n      ',t.tables.length>0&&(s+="<h5>Tables Referenced:</h5>",t.tables.forEach(t=>{s+=`<div class="context-item table">${t}</div>`})),t.ctes.length>0&&(s+="<h5>CTEs Defined:</h5>",t.ctes.forEach(t=>{s+=`<div class="context-item cte">${t}</div>`})),t.columns.length>0&&t.columns.length<=20&&(s+="<h5>Columns Mentioned:</h5>",t.columns.slice(0,10).forEach(t=>{s+=`<div class="context-item column">${t}</div>`}),t.columns.length>10&&(s+=`<div class="context-item">... and ${t.columns.length-10} more</div>`)),s+="</div>")}if(t.queryResult){const n=t.queryResult;s+=`\n      <div class="context-section">\n        <h4>Query Results</h4>\n        <div class="context-item">\n          <strong>Status:</strong> ${n.success?"Success":"Failed"}\n        </div>\n        <div class="context-item">\n          <strong>Execution Time:</strong> ${n.executionTime?.toFixed(2)||0}ms\n        </div>\n    `,n.success?(s+=`\n        <div class="context-item">\n          <strong>Rows:</strong> ${n.rows?.length||0}\n        </div>\n        <div class="context-item">\n          <strong>Columns:</strong> ${n.fields?.length||0}\n        </div>\n      `,n.fields&&n.fields.length>0&&(s+="<h5>Column Schema:</h5>",n.fields.forEach(t=>{s+=`<div class="context-item column">${t.name} (${t.dataTypeID||"unknown"})</div>`}))):n.error&&(s+=`\n        <div class="context-item" style="color: #f44336;">\n          <strong>Error:</strong> ${n.error}\n        </div>\n      `),s+="</div>"}if("table"===t.type&&window.appState.schemaData){const n=t.name,e=window.appState.schemaData.tables?.find(t=>t.name===n);e&&(s+=`\n        <div class="context-section">\n          <h4>üèóÔ∏è Table Schema</h4>\n          <div class="context-item">\n            <strong>Table:</strong> ${e.name}\n          </div>\n          <div class="context-item">\n            <strong>Columns:</strong> ${e.columns.length}\n          </div>\n          <h5>Column Details:</h5>\n      `,e.columns.forEach(t=>{s+=`\n          <div class="context-item column">\n            <strong>${t.name}</strong>: ${t.type}\n          </div>\n        `}),s+="</div>")}s+='\n    <div class="context-section">\n      <h4>üí° Tips & Shortcuts</h4>\n      <div class="context-item">\n        <strong>Ctrl+Enter:</strong> Run query\n      </div>\n      <div class="context-item">\n        <strong>Ctrl+Shift+F:</strong> Format SQL\n      </div>\n      <div class="context-item">\n        <strong>Ctrl+S:</strong> Save tab\n      </div>\n      <div class="context-item">\n        <strong>Ctrl+W:</strong> Close tab\n      </div>\n      <div class="context-item">\n        <strong>Ctrl+Shift+T:</strong> New tab\n      </div>\n    </div>\n  ',n.innerHTML=s}function getTypeDescription(t){switch(t){case"table":return"Database Table";case"shared-cte":return"Shared CTE";case"private-cte":return"Private CTE";case"main-file":return"Main SQL File";default:return"SQL Query"}}function analyzeSqlContent(t){const n={tables:[],ctes:[],columns:[]};if(!t||!t.trim())return n;t.toLowerCase().split("\n");const e=/\b(?:from|join)\s+([a-zA-Z_][a-zA-Z0-9_]*)/gi;let s;for(;null!==(s=e.exec(t));){const t=s[1];n.tables.includes(t)||n.tables.push(t)}const o=/\bwith\s+([a-zA-Z_][a-zA-Z0-9_]*)\s+as/gi;for(;null!==(s=o.exec(t));){const t=s[1];n.ctes.includes(t)||n.ctes.push(t)}const i=/\b([a-zA-Z_][a-zA-Z0-9_]*)\.[a-zA-Z_][a-zA-Z0-9_]*/gi;for(;null!==(s=i.exec(t));){const t=s[0];!n.columns.includes(t)&&n.columns.length<50&&n.columns.push(t)}const c=/select\s+([^from]+?)(?:\s+from|\s*$)/gi;for(;null!==(s=c.exec(t));)s[1].split(",").map(t=>t.trim()).forEach(t=>{const e=t.match(/\b([a-zA-Z_][a-zA-Z0-9_]*)\b/);if(e&&!["as","from","where","select","distinct","all"].includes(e[1].toLowerCase())){const t=e[1];!n.columns.includes(t)&&n.columns.length<50&&n.columns.push(t)}});return n}window.updateContextPanel=updateContextPanel;