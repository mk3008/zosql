let leftEditor=null,rightEditor=null;export async function initializeEditors(){try{window.logger.info("Initializing Monaco Editor..."),await setupMonacoEditor(),await createEditorInstances(),window.logger.info("Monaco Editor initialized successfully")}catch(e){throw window.logger.error("Failed to initialize Monaco Editor:",e),e}}async function loadFormatterConfig(){try{const e=await fetch("/api/formatter-config");return e.ok?await e.json():{indentSize:4,indentChar:" ",tabSize:4}}catch(e){return{indentSize:4,indentChar:" ",tabSize:4}}}async function setupMonacoEditor(){return new Promise((e,t)=>{require.config({paths:{vs:"https://cdn.jsdelivr.net/npm/monaco-editor@0.36.1/min/vs"}}),require(["vs/editor/editor.main"],()=>{monaco.languages.register({id:"sql"}),monaco.languages.setMonarchTokensProvider("sql",{ignoreCase:!0,tokenizer:{root:[[/\bWITH\b/i,"keyword.cte"],[/\b(SELECT|FROM|WHERE|JOIN|INNER|LEFT|RIGHT|OUTER|FULL|CROSS|ON|GROUP|ORDER|BY|HAVING|LIMIT|OFFSET|UNION|INTERSECT|EXCEPT|ALL|AS|DISTINCT|INSERT|UPDATE|DELETE|CREATE|DROP|ALTER|TRUNCATE|TABLE|INDEX|VIEW|DATABASE|SCHEMA|SEQUENCE|FUNCTION|PROCEDURE|TRIGGER|GRANT|REVOKE|COMMIT|ROLLBACK|TRANSACTION|BEGIN|END|CASE|WHEN|THEN|ELSE|IF|WHILE|FOR|LOOP|RETURN|DECLARE|SET|VALUES|INTO|RECURSIVE)\b/i,"keyword"],[/\b(AND|OR|NOT|IN|EXISTS|BETWEEN|LIKE|ILIKE|IS|NULL|TRUE|FALSE|SIMILAR|REGEXP|RLIKE|GLOB|MATCH|ANY|SOME|ALL)\b/i,"operator"],[/\b(COUNT|SUM|AVG|MIN|MAX|FIRST|LAST|COALESCE|NULLIF|GREATEST|LEAST|CAST|CONVERT|SUBSTRING|SUBSTR|LENGTH|CHAR_LENGTH|TRIM|LTRIM|RTRIM|UPPER|LOWER|CONCAT|REPLACE|SPLIT_PART|POSITION|STRPOS|LEFT|RIGHT|NOW|CURRENT_DATE|CURRENT_TIME|CURRENT_TIMESTAMP|EXTRACT|DATE_PART|AGE|ROUND|FLOOR|CEIL|ABS|RANDOM|GENERATE_SERIES|UNNEST|ARRAY_AGG|STRING_AGG|JSON_AGG|JSONB_AGG|ROW_NUMBER|RANK|DENSE_RANK|PERCENT_RANK|CUME_DIST|NTILE|LAG|LEAD|FIRST_VALUE|LAST_VALUE|NTH_VALUE)(?=\s*\()/i,"predefined.function"],[/\b(INTEGER|INT|BIGINT|SMALLINT|TINYINT|DECIMAL|NUMERIC|REAL|FLOAT|DOUBLE|PRECISION|MONEY|VARCHAR|CHAR|TEXT|STRING|CLOB|BLOB|BOOLEAN|BOOL|BIT|DATE|TIME|TIMESTAMP|TIMESTAMPTZ|INTERVAL|UUID|JSON|JSONB|XML|ARRAY|HSTORE|INET|CIDR|MACADDR|SERIAL|BIGSERIAL|SMALLSERIAL|IDENTITY|GENERATED|ALWAYS)\b/i,"type"],[/\b\d+(\.\d+)?\b/,"number"],[/\b0x[0-9a-fA-F]+\b/,"number.hex"],[/'([^'\\]|\\.)*'/,"string"],[/"([^"\\]|\\.)*"/,"string"],[/`([^`\\]|\\.)*`/,"string.backtick"],[/[@$][a-zA-Z_][a-zA-Z0-9_]*/,"variable"],[/:[a-zA-Z_][a-zA-Z0-9_]*/,"variable.parameter"],[/[a-zA-Z_][a-zA-Z0-9_]*/,"identifier"],[/--.*$/,"comment"],[/\/\*/,"comment","@comment"],[/[=<>!]+/,"operator"],[/[()[\]{},;]/,"delimiter"],[/[+\-*/%]/,"operator"],[/\s+/,"white"]],comment:[[/[^/*]+/,"comment"],[/\*\//,"comment","@pop"],[/[/*]/,"comment"]]}}),monaco.editor.defineTheme("sql-dark",{base:"vs-dark",inherit:!0,rules:[{token:"keyword",foreground:"569CD6",fontStyle:"bold"},{token:"keyword.cte",foreground:"C586C0",fontStyle:"bold"},{token:"operator",foreground:"D4D4D4"},{token:"predefined.function",foreground:"DCDCAA"},{token:"type",foreground:"4EC9B0"},{token:"string",foreground:"CE9178"},{token:"string.backtick",foreground:"CE9178"},{token:"number",foreground:"B5CEA8"},{token:"number.hex",foreground:"B5CEA8"},{token:"comment",foreground:"6A9955",fontStyle:"italic"},{token:"variable",foreground:"9CDCFE"},{token:"variable.parameter",foreground:"9CDCFE",fontStyle:"italic"},{token:"identifier",foreground:"D4D4D4"},{token:"delimiter",foreground:"D4D4D4"}],colors:{"editor.background":"#1e1e1e","editor.foreground":"#d4d4d4","editor.selectionBackground":"#264f78","editor.lineHighlightBackground":"#2a2d2e"}}),monaco.languages.setLanguageConfiguration("sql",{comments:{lineComment:"--",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"],["(",")"]],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"',notIn:["string"]},{open:"'",close:"'",notIn:["string","comment"]}],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}],folding:{markers:{start:new RegExp("^\\s*\\/\\*"),end:new RegExp("^\\s*\\*\\/")}}}),e()})})}async function createEditorInstances(){const e=(await loadFormatterConfig()).indentSize||4,t=document.getElementById("left-editor");t&&(leftEditor=monaco.editor.create(t,{value:"-- Welcome to zosql Browser\n-- Enter your SQL query here\n\nSELECT * FROM users;",language:"sql",theme:"sql-dark",wordWrap:"off",minimap:{enabled:!1},scrollBeyondLastLine:!1,fontSize:14,tabSize:e,insertSpaces:!0,automaticLayout:!0}),window.appState.leftEditor=leftEditor,setupEditorEvents(leftEditor,"left"));const o=document.getElementById("right-editor");o&&(rightEditor=monaco.editor.create(o,{value:"-- Right panel editor\n-- This editor is used when split view is enabled\n\nSELECT * FROM orders;",language:"sql",theme:"sql-dark",wordWrap:"off",minimap:{enabled:!1},scrollBeyondLastLine:!1,fontSize:14,tabSize:e,insertSpaces:!0,automaticLayout:!0}),window.appState.rightEditor=rightEditor,setupEditorEvents(rightEditor,"right"))}function setupEditorEvents(e,t){e.onDidChangeModelContent(()=>{const o="left"===t?window.appState.activeLeftTabId:window.appState.activeRightTabId;if(o){const n=("left"===t?window.appState.leftTabs:window.appState.rightTabs).get(o);n&&(n.isModified=!0,n.content=e.getValue(),updateTabUI(o,t))}}),e.onDidFocusEditorWidget(()=>{window.appState.activePanel=t,updateActivePanel(t)}),e.addCommand(monaco.KeyMod.CtrlCmd|monaco.KeyCode.Enter,()=>{runQuery()}),e.addCommand(monaco.KeyMod.CtrlCmd|monaco.KeyMod.Shift|monaco.KeyCode.KeyF,()=>{formatCurrentSQL()}),e.addCommand(monaco.KeyMod.CtrlCmd|monaco.KeyCode.KeyS,()=>{saveCurrentTab()})}function updateTabUI(e,t){const o=document.querySelector(`[data-tab-id="${e}"]`);if(o){const n=("left"===t?window.appState.leftTabs:window.appState.rightTabs).get(e);if(n){const r=n.isModified?" •":"",i=getTabIcon(n.type);o.innerHTML=`\n        ${i} ${n.name}${r}\n        <span class="close-btn" onclick="closeTab(event, '${e}', '${t}')">×</span>\n      `}}}function getTabIcon(e){switch(e){case"table":return"[TBL]";case"shared-cte":return"[SHARED]";case"private-cte":return"[PRIVATE]";case"main-file":return"[FILE]";default:return"[QUERY]"}}function updateActivePanel(e){const t=document.getElementById("left-editor-panel"),o=document.getElementById("right-editor-panel");t&&t.classList.toggle("active","left"===e),o&&o.classList.toggle("active","right"===e),window.updateContextPanel&&window.updateContextPanel()}export function getCurrentEditor(){return"left"===window.appState.activePanel?leftEditor:rightEditor}export function getEditor(e){return"left"===e?leftEditor:rightEditor}export function setEditorContent(e,t){const o=getEditor(e);o&&o.setValue(t)}export function getEditorContent(e){const t=getEditor(e);return t?t.getValue():""}export function formatCurrentSQL(){const e=getCurrentEditor();if(!e)return;const t=e.getValue();t.trim()&&fetch("/api/format-sql",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({sql:t})}).then(async e=>{if(!e.ok)throw new Error(`HTTP ${e.status}: ${e.statusText}`);return e.json()}).then(t=>{if(t.success){const o=t.formatted||t.formattedSql;o?(e.setValue(o),window.logger.info("SQL formatted successfully"),window.showSuccessToast("SQL formatted successfully","Format Complete")):(window.logger.error("Format failed: No formatted SQL returned"),window.showErrorToast("No formatted SQL returned","Format Failed"))}else window.logger.error("Format failed:",t.error),window.showErrorToast(t.error||"Unknown error","Format Failed")}).catch(e=>{window.logger.error("Format request failed:",e),window.showErrorToast("Failed to connect to format service","Format Error")})}export function saveCurrentTab(){const e="left"===window.appState.activePanel?window.appState.activeLeftTabId:window.appState.activeRightTabId;if(!e)return;const t=("left"===window.appState.activePanel?window.appState.leftTabs:window.appState.rightTabs).get(e);t&&(t.isModified=!1,t.content=getCurrentEditor().getValue(),updateTabUI(e,window.appState.activePanel),window.logger.info(`Tab "${t.name}" saved successfully`))}window.formatCurrentSQL=formatCurrentSQL,window.saveCurrentTab=saveCurrentTab,window.runQuery=runQuery;export async function runQuery(){const e=getCurrentEditor();if(!e)return;const t=e.getValue();if(t.trim())try{const{executeQuery:e}=await import("./database.js");window.logger.info("Executing query...");const o=await e(t);if(updateQueryResults(o,window.appState.activePanel),o.success){const e=o.rows?o.rows.length:0,t=o.executionTime?o.executionTime.toFixed(2):0;window.showSuccessToast(`Query executed successfully (${e} rows, ${t}ms)`,"Query Complete")}else window.showErrorToast(o.error||"Query failed","Query Error")}catch(e){window.logger.error("Query execution failed:",e),updateQueryResults({success:!1,error:e.message,executionTime:0},window.appState.activePanel),window.showErrorToast(e.message||"Query execution failed","Query Error")}}function updateQueryResults(e,t){const o=document.getElementById(`${t}-results-content`),n=document.getElementById(`${t}-execution-info`);if(o&&n)if(e.success){if(n.textContent=`${e.rows.length} rows (${e.executionTime.toFixed(2)}ms)`,e.rows.length>0){let t="<table><thead><tr>";e.fields.forEach(e=>{t+=`<th>${e.name}</th>`}),t+="</tr></thead><tbody>",e.rows.forEach(o=>{t+="<tr>",e.fields.forEach(e=>{const n=o[e.name];t+=`<td>${null!==n?n:"<em>null</em>"}</td>`}),t+="</tr>"}),t+="</tbody></table>",o.innerHTML=t}else o.innerHTML='<div class="results-placeholder">Query executed successfully (0 rows returned)</div>';const r="left"===t?window.appState.activeLeftTabId:window.appState.activeRightTabId;if(r){const o=("left"===t?window.appState.leftTabs:window.appState.rightTabs).get(r);o&&(o.queryResult=e)}}else n.textContent="Query failed",o.innerHTML=`\n      <div style="color: #f44336; padding: 20px; font-family: monospace;">\n        <strong>Error:</strong> ${e.error}\n      </div>\n    `}