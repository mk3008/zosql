import{fileModelManager}from"../models/file-model-manager.js";export class HeaderControls{constructor(){this.init()}init(){this.setupEventListeners(),console.log("[HeaderControls] Initialized")}setupEventListeners(){const e=document.getElementById("open-file-btn-header");e&&e.addEventListener("click",()=>this.handleOpenFile());const n=document.getElementById("open-file-btn");n&&n.addEventListener("click",()=>this.handleOpenFile())}handleOpenFile(){const e=document.createElement("input");e.type="file",e.accept=".sql",e.style.display="none",e.addEventListener("change",n=>{const o=n.target.files[0];o&&this.loadFile(o),document.body.removeChild(e)}),document.body.appendChild(e),e.click()}async loadFile(e){try{const n=await this.readFileContent(e),o=await this.formatSQL(n);await this.openInNewTab(e.name,o),await this.analyzeCTEDependencies(o,e.name),this.showToast(`File "${e.name}" opened successfully`,"success"),console.log(`[HeaderControls] Loaded file: ${e.name}`)}catch(e){console.error("[HeaderControls] Failed to load file:",e),this.showToast(`File loading error: ${e.message}`,"error")}}readFileContent(e){return new Promise((n,o)=>{const t=new FileReader;t.onload=e=>{n(e.target.result)},t.onerror=e=>{o(new Error("Failed to read file"))},t.readAsText(e,"UTF-8")})}async analyzeCTEDependencies(e,n){try{console.log("[HeaderControls] Analyzing CTE dependencies...");const o=await fetch("/api/decompose",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({sql:e,queryName:n.replace(".sql",""),originalFilePath:n})});if(!o.ok)throw new Error(`Decompose API error: ${o.status}`);const t=await o.json();t.success?(console.log("[HeaderControls] CTE analysis successful:",t),this.displayCTEDependenciesInWorkspace(t.workspace,t)):console.warn("[HeaderControls] CTE analysis failed:",t.error)}catch(e){console.warn("[HeaderControls] Failed to analyze CTE dependencies:",e)}}displayCTEDependenciesInWorkspace(e,n=null){try{const o=document.getElementById("workspace-panel-shadow");if(!o||!o.component)return void console.warn("[HeaderControls] Workspace panel shadow not found");const t={privateCtes:e.privateCtes,mainQueryName:e.name,mainQuery:n?.decomposedQuery||"",dependencyTree:this.buildCTEDependencyTree(e.privateCtes)};o.component.updateCTEDependencies?(o.component.updateCTEDependencies(t),console.log("[HeaderControls] CTE dependency tree updated in workspace shadow")):console.warn("[HeaderControls] Workspace panel shadow updateCTEDependencies method not found")}catch(e){console.error("[HeaderControls] Error displaying CTE dependencies:",e)}}buildCTEDependencyTree(e){if(!e||0===Object.keys(e).length)return{};const n=Object.keys(e),o=new Set;Object.values(e).forEach(e=>{e.dependencies&&e.dependencies.forEach(e=>o.add(e))});const t=n.filter(e=>!o.has(e)),s=(n,o=0)=>{const t=e[n];if(!t)return null;const a={};return t.dependencies&&t.dependencies.length>0&&t.dependencies.forEach(e=>{const n=s(e,o+1);n&&(a[e]=n)}),{name:n,level:o,dependencies:t.dependencies||[],children:a,query:t.query,description:t.description}},a={};return t.forEach(e=>{const n=s(e);n&&(a[e]=n)}),console.log("[HeaderControls] Built CTE dependency tree:",a),a}async formatSQL(e){try{const n=await fetch("/api/format-sql",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({sql:e})});if(!n.ok)throw new Error(`Format API error: ${n.status}`);const o=await n.json();return o.success?o.formattedSql||o.formatted||e:(console.warn("[HeaderControls] Format API failed:",o.error),e)}catch(n){return console.warn("[HeaderControls] Failed to format SQL, using original:",n),e}}async openInNewTab(e,n){const o=document.getElementById("center-panel-shadow");if(o&&o.createOrReuseTabForFile){const t=o.createOrReuseTabForFile(e,n,{type:"sql"});console.log(`[HeaderControls] Created/reused tab for file: ${e} (${t})`)}else console.warn("[HeaderControls] Center panel not available to load file")}showToast(e,n="info"){window.showToast?window.showToast(e,n):console.log(`[Toast] ${n}: ${e}`)}}