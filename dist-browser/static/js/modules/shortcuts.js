export function initializeKeyboardShortcuts(){window.logger.info("Initializing keyboard shortcuts..."),setupGlobalShortcuts(),setupEditorShortcuts(),window.logger.info("Keyboard shortcuts initialized successfully")}function setupGlobalShortcuts(){document.addEventListener("keydown",t=>t.ctrlKey&&t.shiftKey&&"P"===t.key?(t.preventDefault(),void showCommandPalette()):t.ctrlKey&&t.shiftKey&&"D"===t.key?(t.preventDefault(),void toggleLeftSidebar()):t.ctrlKey&&t.shiftKey&&"E"===t.key?(t.preventDefault(),void toggleRightSidebar()):t.ctrlKey&&t.shiftKey&&"T"===t.key?(t.preventDefault(),void createNewTab()):t.ctrlKey&&"w"===t.key?(t.preventDefault(),void closeCurrentTab()):t.ctrlKey&&"Tab"===t.key?(t.preventDefault(),void switchToNextTab()):t.ctrlKey&&t.shiftKey&&"Tab"===t.key?(t.preventDefault(),void switchToPreviousTab()):t.ctrlKey&&t.key>="1"&&t.key<="9"?(t.preventDefault(),void switchToTabByNumber(parseInt(t.key)-1)):"F5"===t.key?(t.preventDefault(),void refreshSchema()):t.ctrlKey&&"r"===t.key?(t.preventDefault(),void resetDatabase()):void 0)}function setupEditorShortcuts(){}async function showCommandPalette(){window.logger.info("Command palette triggered (not implemented yet)"),alert("Command palette is not implemented yet")}async function toggleLeftSidebar(){const{toggleLeftSidebar:t}=await import("./ui.js");t(),window.logger.info("Left sidebar toggled via keyboard shortcut")}async function toggleRightSidebar(){const{toggleRightSidebar:t}=await import("./ui.js");t(),window.logger.info("Right sidebar toggled via keyboard shortcut")}async function createNewTab(){const{createNewTab:t}=await import("./tabs.js");t(window.appState.activePanel),window.logger.info("New tab created via keyboard shortcut")}async function closeCurrentTab(){const t="left"===window.appState.activePanel?window.appState.activeLeftTabId:window.appState.activeRightTabId;if(t){const{closeTabById:e}=await import("./tabs.js");e(null,t,window.appState.activePanel),window.logger.info("Current tab closed via keyboard shortcut")}}async function switchToNextTab(){const t="left"===window.appState.activePanel?window.appState.leftTabs:window.appState.rightTabs,e="left"===window.appState.activePanel?window.appState.activeLeftTabId:window.appState.activeRightTabId,a=Array.from(t.keys()),o=a.indexOf(e);if(o>=0&&a.length>1){const t=(o+1)%a.length,{switchToTab:e}=await import("./tabs.js");e(a[t],window.appState.activePanel),window.logger.info("Switched to next tab via keyboard shortcut")}}async function switchToPreviousTab(){const t="left"===window.appState.activePanel?window.appState.leftTabs:window.appState.rightTabs,e="left"===window.appState.activePanel?window.appState.activeLeftTabId:window.appState.activeRightTabId,a=Array.from(t.keys()),o=a.indexOf(e);if(o>=0&&a.length>1){const t=(o-1+a.length)%a.length,{switchToTab:e}=await import("./tabs.js");e(a[t],window.appState.activePanel),window.logger.info("Switched to previous tab via keyboard shortcut")}}async function switchToTabByNumber(t){const e="left"===window.appState.activePanel?window.appState.leftTabs:window.appState.rightTabs,a=Array.from(e.keys());if(t>=0&&t<a.length){const{switchToTab:e}=await import("./tabs.js");e(a[t],window.appState.activePanel),window.logger.info(`Switched to tab ${t+1} via keyboard shortcut`)}}async function refreshSchema(){try{const{refreshSchema:t}=await import("./schema.js");await t(),window.logger.info("Schema refreshed via keyboard shortcut")}catch(t){window.logger.error("Error refreshing schema:",t)}}async function resetDatabase(){if(confirm("Are you sure you want to reset the database?"))try{const{resetDatabase:t}=await import("./database.js");await t();const{refreshSchema:e}=await import("./schema.js");await e(),window.logger.info("Database reset via keyboard shortcut"),alert("Database reset successfully")}catch(t){window.logger.error("Error resetting database:",t),alert(`Error resetting database: ${t.message}`)}}export{showCommandPalette,toggleLeftSidebar,toggleRightSidebar,createNewTab,closeCurrentTab,switchToNextTab,switchToPreviousTab,switchToTabByNumber,refreshSchema,resetDatabase};