export async function initializeSchema(){try{await loadSchemaInfo(),await loadSharedCteInfo(),await loadWorkspaceInfo(),updateSchemaUI()}catch(e){window.logger.error("Failed to initialize schema:",e)}}async function loadSchemaInfo(){try{window.logger.info("Loading schema information...");const e=await fetch("/api/schema"),a=await e.json();window.logger.info("Schema response received",{success:a.success,error:a.error,hasSchema:!!a.schema,tablesCount:a.schema?.tables?.length||0}),a.success&&a.schema?(window.appState.schemaData=a.schema,window.logger.info("Schema loaded successfully",{tablesCount:a.schema.tables.length})):window.logger.error("Schema load failed",{error:a.error})}catch(e){window.logger.error("Error loading schema:",e)}}async function loadSharedCteInfo(){try{window.logger.info("Loading shared CTE information...");const e=await fetch("/api/shared-cte"),a=await e.json();window.logger.info("Shared CTE response received",{success:a.success,error:a.error,hasSharedCtes:!!a.sharedCtes,ctesCount:a.sharedCtes?Object.keys(a.sharedCtes).length:0}),a.success&&a.sharedCtes?(window.appState.sharedCteData=a.sharedCtes,window.logger.info("Shared CTEs loaded successfully",{ctesCount:Object.keys(a.sharedCtes).length})):window.logger.warn("Shared CTE load failed",{error:a.error})}catch(e){window.logger.error("Error loading shared CTEs:",e)}}async function loadWorkspaceInfo(){try{window.logger.info("Loading workspace information...");const e=document.getElementById("workspace-info");e&&(e.innerHTML="<div>No workspace active</div>")}catch(e){window.logger.error("Error loading workspace info:",e)}}function updateSchemaUI(){updateTablesInfo(),updateSharedCteInfo()}function updateTablesInfo(){const e=document.getElementById("tables-info");if(!e)return;if(!window.appState.schemaData||!window.appState.schemaData.tables)return void(e.innerHTML="<div>No tables available</div>");let a="";window.appState.schemaData.tables.forEach(e=>{a+=`\n      <div class="table-resource" style="margin-bottom: 8px; padding: 8px; border-radius: 3px; cursor: pointer;" \n           onclick="openTableTab('${e.name}')">\n        <strong style="color: #007acc;">${e.name}</strong>\n        <div style="font-size: 11px; color: #808080; margin-top: 2px;">\n          ${e.columns.length} columns\n        </div>\n      </div>\n    `}),e.innerHTML=a}function updateSharedCteInfo(){const e=document.getElementById("shared-cte-info");if(!e)return;if(!window.appState.sharedCteData||0===Object.keys(window.appState.sharedCteData).length)return void(e.innerHTML="<div>No shared CTEs available</div>");let a="";Object.entries(window.appState.sharedCteData).forEach(([e,n])=>{a+=`\n      <div class="shared-cte-resource" style="margin-bottom: 8px; padding: 8px; border-radius: 3px; cursor: pointer;" \n           onclick="openSharedCteTab('${e}')">\n        <strong style="color: #ffa500;">${e}</strong>\n        <div style="font-size: 11px; color: #808080; margin-top: 2px;">\n          ${n.description||"No description"}\n        </div>\n      </div>\n    `}),e.innerHTML=a}window.openTableTab=function(e){const a=window.appState.schemaData?.tables?.find(a=>a.name===e);if(!a)return;const n=`-- Table: ${e}\n-- Columns: ${a.columns.map(e=>`${e.name} (${e.type})`).join(", ")}\n\nSELECT * FROM ${e} LIMIT 10;`;window.createNewTab&&window.createNewTab(window.appState.activePanel,`table-${e}`,e,"table",n)},window.openSharedCteTab=function(e){const a=window.appState.sharedCteData?.[e];if(!a)return;const n=`-- Shared CTE: ${e}\n-- Description: ${a.description||"No description"}\n\n${a.sql||"No SQL content"}`;window.createNewTab&&window.createNewTab(window.appState.activePanel,`shared-cte-${e}`,e,"shared-cte",n)};export function getSchemaData(){return window.appState.schemaData}export function getSharedCteData(){return window.appState.sharedCteData}export function refreshSchema(){return initializeSchema()}