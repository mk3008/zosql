export class ShadowDOMToggle{constructor(){this.STORAGE_KEY="zosql-shadow-dom-enabled",this.componentPairs=new Map,this.legacyControls=new Set,this.isEnabled=this.getSavedState(),this.init()}init(){this.registerComponentPair("workspace-panel","workspace-panel-shadow"),this.registerComponentPair("context-sidebar","right-panel-shadow"),this.registerComponentPair("header-traditional","header-shadow"),this.registerComponentPair("editor-split-container","center-panel-shadow"),this.registerLegacyControl(".legacy-controls"),window.toggleShadowDOM=this.toggle.bind(this),window.enableShadowDOM=()=>this.setEnabled(!0),window.disableShadowDOM=()=>this.setEnabled(!1),console.log("[ShadowDOMToggle] Initialized - Shadow DOM: "+(this.isEnabled?"Enabled":"Disabled")),console.log("[ShadowDOMToggle] Commands: toggleShadowDOM(), enableShadowDOM(), disableShadowDOM()"),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>this.applyCurrentState()):this.applyCurrentState()}registerComponentPair(e,t){this.componentPairs.set(e,t)}registerLegacyControl(e){this.legacyControls.add(e)}applyCurrentState(){console.log("[ShadowDOMToggle] Applying current state:",{isEnabled:this.isEnabled,timestamp:(new Date).toISOString()});for(const[e,t]of this.componentPairs)this.switchComponent(e,t,this.isEnabled);this.toggleLegacyControls(this.isEnabled),this.addToggleUI(),setTimeout(()=>{window.sidebarManager?(console.log("[ShadowDOMToggle] Triggering sidebar manager state reapplication..."),window.sidebarManager.applyLeftSidebarState(),window.sidebarManager.applyRightSidebarState(),window.sidebarManager.applyCenterPanelState()):(console.warn("[ShadowDOMToggle] SidebarManager not available yet, retrying..."),setTimeout(()=>{window.sidebarManager&&(window.sidebarManager.applyLeftSidebarState(),window.sidebarManager.applyRightSidebarState(),window.sidebarManager.applyCenterPanelState())},200))},100)}switchComponent(e,t,o){const a=document.getElementById(e)||document.querySelector(e),n=document.getElementById(t)||document.querySelector(t);a&&n?o?(a.style.display="none",n.style.display="block",console.log(`[ShadowDOMToggle] Switched to Shadow DOM: ${t}`)):(a.style.display="block",n.style.display="none",console.log(`[ShadowDOMToggle] Switched to Traditional: ${e}`)):a&&(a.style.display="block",o&&console.warn(`[ShadowDOMToggle] Shadow DOM component not found: ${t}`))}toggleLegacyControls(e){for(const t of this.legacyControls)document.querySelectorAll(t).forEach(o=>{e?(o.style.display="none",console.log(`[ShadowDOMToggle] Hidden legacy control: ${t}`)):(o.style.display="",console.log(`[ShadowDOMToggle] Restored legacy control: ${t}`))})}addToggleUI(){this.updateHeaderToggleButton(),this.addFallbackToggleButton()}addFallbackToggleButton(){const e=document.getElementById("shadow-dom-toggle-fallback");e&&e.remove();const t=document.getElementById("enable-shadow-dom-btn");if(t&&(this.isEnabled?t.style.display="none":(t.style.display="block",t.onclick=()=>this.toggle())),!this.isEnabled){const e=document.createElement("button");e.id="shadow-dom-toggle-fallback",e.innerHTML="ðŸ”“ â†’ Shadow DOM",e.title="Switch to Shadow DOM mode (fallback button)",e.style.cssText="\n        position: fixed;\n        bottom: 20px;\n        right: 20px;\n        z-index: 9999;\n        padding: 10px 16px;\n        background: #10b981;\n        color: white;\n        border: none;\n        border-radius: 8px;\n        cursor: pointer;\n        font-size: 14px;\n        font-weight: 500;\n        box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n        transition: all 0.3s;\n        display: flex;\n        align-items: center;\n        gap: 6px;\n      ",e.addEventListener("click",()=>this.toggle()),e.addEventListener("mouseenter",()=>{e.style.transform="scale(1.05) translateY(-2px)",e.style.background="#059669"}),e.addEventListener("mouseleave",()=>{e.style.transform="scale(1) translateY(0)",e.style.background="#10b981"}),document.body.appendChild(e)}}updateHeaderToggleButton(){const e=document.getElementById("header-shadow");e&&e.updateShadowDOMToggleButton&&e.updateShadowDOMToggleButton()}toggle(){this.setEnabled(!this.isEnabled)}setEnabled(e){this.isEnabled=e,this.saveState(),this.applyCurrentState(),this.updateHeaderToggleButton(),window.sidebarManager&&window.sidebarManager.onShadowDOMToggle&&window.sidebarManager.onShadowDOMToggle(),this.addFallbackToggleButton(),this.showToast(`Switched to ${e?"Shadow DOM":"Traditional"} components`,e?"success":"info"),console.log(`[ShadowDOMToggle] ${e?"Enabled":"Disabled"} Shadow DOM components`)}saveState(){localStorage.setItem(this.STORAGE_KEY,this.isEnabled.toString())}getSavedState(){return"true"===localStorage.getItem(this.STORAGE_KEY)}showToast(e,t="info"){const o=document.querySelector(".shadow-dom-toast");o&&o.remove();const a=document.createElement("div");a.className="shadow-dom-toast",a.textContent=e;const n={success:{bg:"#10b981",border:"#059669"},info:{bg:"#3b82f6",border:"#2563eb"},warning:{bg:"#f59e0b",border:"#d97706"}},s=n[t]||n.info;if(a.style.cssText=`\n      position: fixed;\n      top: 60px;\n      right: 10px;\n      z-index: 10000;\n      padding: 12px 16px;\n      background: ${s.bg};\n      color: white;\n      border: 2px solid ${s.border};\n      border-radius: 8px;\n      font-size: 14px;\n      font-weight: 500;\n      box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n      animation: slideIn 0.3s ease-out;\n    `,!document.querySelector("#shadow-dom-toast-styles")){const e=document.createElement("style");e.id="shadow-dom-toast-styles",e.textContent="\n        @keyframes slideIn {\n          from {\n            transform: translateX(100%);\n            opacity: 0;\n          }\n          to {\n            transform: translateX(0);\n            opacity: 1;\n          }\n        }\n      ",document.head.appendChild(e)}document.body.appendChild(a),setTimeout(()=>{a.parentNode&&(a.style.animation="slideIn 0.3s ease-out reverse",setTimeout(()=>a.remove(),300))},3e3)}getStatus(){return{enabled:this.isEnabled,componentPairs:Array.from(this.componentPairs.entries()),availableCommands:["toggleShadowDOM()","enableShadowDOM()","disableShadowDOM()"]}}}const shadowDOMToggle=new ShadowDOMToggle;window.shadowDOMToggle=shadowDOMToggle,window.getShadowDOMStatus=()=>shadowDOMToggle.getStatus();