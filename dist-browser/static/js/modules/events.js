export function initializeEventHandlers(){window.logger.info("Initializing event handlers..."),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>{setupSidebarEvents(),setupActionButtonEvents(),setupDebugLogEvents(),setupContextPanelEvents()}):(setupSidebarEvents(),setupActionButtonEvents(),setupDebugLogEvents(),setupContextPanelEvents()),window.logger.info("Event handlers initialized successfully")}function setupSidebarEvents(){const e=document.querySelectorAll("h3.collapsible");window.logger.info(`Found ${e.length} collapsible headers`),e.forEach(e=>{const o=e.getAttribute("data-target");window.logger.info(`Setting up collapsible header for ${o}`),e.addEventListener("click",()=>{window.logger.info(`Clicked on collapsible header for ${o}`),o&&toggleSection(o)})})}function setupActionButtonEvents(){const e=document.getElementById("open-file-btn");e?(window.logger.info("Open File button found, setting up event listener"),e.addEventListener("click",()=>{window.logger.info("Open File button clicked!"),openAndDecomposeFile()})):window.logger.warn("Open File button not found in DOM");const o=document.getElementById("clear-workspace-btn");o&&o.addEventListener("click",()=>{clearWorkspace()});const n=document.getElementById("reset-database-btn");n&&n.addEventListener("click",()=>{resetDatabase()});const t=document.getElementById("cte-validation-btn");t&&t.addEventListener("click",()=>{toggleCteValidationPanel()})}function setupDebugLogEvents(){const e=document.getElementById("view-debug-logs");e&&e.addEventListener("click",e=>{e.preventDefault(),window.open(".tmp/debug.log","_blank")})}function setupContextPanelEvents(){const e=document.getElementById("refresh-context-btn");e&&e.addEventListener("click",()=>{refreshContextPanel()})}function toggleSection(e){window.logger.info(`toggleSection called for ${e}`);const o=document.getElementById(e),n=document.getElementById(e.replace("-section","-icon"));if(window.logger.info(`Section element found: ${!!o}, Icon element found: ${!!n}`),o&&n){const e=o.style.display,t="none"!==e;window.logger.info(`Current display: '${e}', isVisible: ${t}`),o.style.display=t?"none":"block",n.textContent=t?"▶":"▼",window.logger.info(`Set display to: '${o.style.display}', icon to: '${n.textContent}'`)}else window.logger.error(`Missing elements - section: ${!!o}, icon: ${!!n}`)}async function decomposeCurrentQuery(){try{const{getCurrentEditor:e}=await import("./editor.js"),o=e();if(!o)return void window.logger.warn("No active editor found");const n=o.getValue();if(!n.trim())return void window.logger.warn("No SQL query to decompose");window.logger.info("Decomposing current query...");const t=await fetch("/api/decompose",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({sql:n})}),i=await t.json();if(i.success){if(window.logger.info("Query decomposed successfully",i),i.decomposedQuery){const{createNewTab:e}=await import("./tabs.js");e(window.appState.activePanel,null,"main.sql","main-file",i.decomposedQuery)}if(i.workspace&&i.workspace.privateCtes){const{createNewTab:e}=await import("./tabs.js");Object.entries(i.workspace.privateCtes).forEach(([o,n])=>{e(window.appState.activePanel,null,`${o}.cte`,"private-cte",n.query)})}window.logger.info("Updating workspace display..."),await updateWorkspaceDisplay(i)}else window.logger.error("Decomposition failed:",i.error),alert(`Decomposition failed: ${i.error}`)}catch(e){window.logger.error("Error during decomposition:",e),console.error("Decomposition error details:",e),alert(`Error during decomposition: ${e.message}`)}}async function clearAllTabs(){try{window.logger.info("Clearing all tabs..."),window.appState.leftTabs.clear(),window.appState.rightTabs.clear();const e=document.getElementById("left-tab-bar"),o=document.getElementById("right-tab-bar");e&&e.querySelectorAll(".tab").forEach(e=>e.remove()),o&&o.querySelectorAll(".tab").forEach(e=>e.remove());const{setEditorContent:n}=await import("./editor.js");n("left",""),window.appState.rightEditor&&n("right",""),clearQueryResults("left"),clearQueryResults("right"),window.logger.info("All tabs cleared successfully")}catch(e){window.logger.error("Error clearing tabs:",e)}}async function clearWorkspace(){if(confirm("Are you sure you want to clear the workspace? This will close all tabs."))try{window.logger.info("Clearing workspace..."),await clearAllTabs();const{createNewTab:e}=await import("./tabs.js");e("left","welcome-left","Welcome","main-file","-- Welcome to zosql Browser\n-- Enter your SQL query here\n\nSELECT * FROM users;"),window.logger.info("Workspace cleared successfully")}catch(e){window.logger.error("Error clearing workspace:",e),alert(`Error clearing workspace: ${e.message}`)}}async function resetDatabase(){if(confirm("Are you sure you want to reset the database? This will recreate all tables with sample data."))try{window.logger.info("Resetting database...");const{resetDatabase:e}=await import("./database.js");await e();const{refreshSchema:o}=await import("./schema.js");await o(),window.logger.info("Database reset successfully"),alert("Database reset successfully")}catch(e){window.logger.error("Error resetting database:",e),alert(`Error resetting database: ${e.message}`)}}function toggleCteValidationPanel(){window.logger.info("CTE validation panel toggled"),alert("CTE validation panel is not implemented yet")}function refreshContextPanel(){window.updateContextPanel&&(window.updateContextPanel(),window.logger.info("Context panel refreshed"))}function clearQueryResults(e){const o=document.getElementById(`${e}-results-content`),n=document.getElementById(`${e}-execution-info`);o&&(o.innerHTML='<div class="results-placeholder">Run a query to see results here</div>'),n&&(n.textContent="")}async function updateWorkspaceDisplay(e){try{const o=window.appState.components?.workspacePanel;if(!o){window.logger.warn("Workspace Panel component not found, using legacy fallback",{workspacePanel:o,componentState:window.appState.components,workspacePanelElement:!!document.getElementById("workspace-panel")});let e=document.getElementById("workspace-info");if(!e){const o=document.getElementById("workspace-panel");o&&(e=document.createElement("div"),e.id="workspace-info",e.style.padding="1rem",e.style.color="var(--text-primary)",o.appendChild(e),window.logger.info("Created workspace-info element inside workspace-panel"))}if(!e)return void window.logger.warn("workspace-info element not found and cannot be created, skipping workspace update")}const n=e.workspace;if(!n)return void window.logger.warn("No workspace info in result");if(o&&o.updateCteTree){window.logger.info("Updating Workspace Panel with CTE data",{workspacePanel:!!o,updateCteTreeMethod:typeof o.updateCteTree,cteCount:Object.keys(n.privateCtes||{}).length,cteNames:Object.keys(n.privateCtes||{})});try{o.updateCteTree(n.privateCtes||{}),window.logger.info("Workspace Panel updateCteTree called successfully")}catch(e){window.logger.error("Failed to update CTE tree",{error:e.message,stack:e.stack})}return}const t=Object.keys(n.privateCtes||{}).length;window.logger.info("Private CTEs in workspace: "+JSON.stringify(Object.keys(n.privateCtes||{}))),window.logger.info("Full privateCtes object: "+JSON.stringify(n.privateCtes,null,2));const i=buildCteHierarchy(n.privateCtes||{});window.logger.info("Built CTE tree: "+JSON.stringify(i,null,2));const r=`\n      ${t>0?`\n        <div class="private-cte-tree">\n          <div class="cte-tree-item clickable" onclick="/* open main query */">\n            <span class="cte-tree-icon">[FILE]</span>\n            <span class="cte-tree-name">${n.name}</span>\n          </div>\n          ${renderCteTree(i,n.privateCtes,1)}\n        </div>\n      `:`\n        <div class="private-cte-tree">\n          <div class="cte-tree-item clickable" onclick="/* open main query */">\n            <span class="cte-tree-icon">[FILE]</span>\n            <span class="cte-tree-name">${n.name}</span>\n          </div>\n        </div>\n      `}\n    `;workspaceInfoDiv.innerHTML=r;const a=document.getElementById("workspace-section"),s=document.getElementById("workspace-icon");a&&"none"===a.style.display&&(a.style.display="block",s&&(s.textContent="▼")),window.updateContextPanel&&window.updateContextPanel()}catch(e){window.logger.error("Error updating workspace display:",e)}}async function openAndDecomposeFile(){try{window.logger.info("openAndDecomposeFile function called");const e=document.createElement("input");e.type="file",e.accept=".sql",e.style.display="none",window.logger.info("File input element created, setting up handlers"),document.body.appendChild(e),window.logger.info("File input added to DOM"),e.onchange=async o=>{window.logger.info("File selection changed");const n=o.target.files[0];if(!n)return window.logger.warn("No file selected"),void document.body.removeChild(e);window.logger.info("File selected:",n.name),window.logger.info("Opening file:",n.name);const t=new FileReader;t.onload=async e=>{const o=e.target.result;window.logger.info("File content loaded, decompressing...");const t=await fetch("/api/decompose",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({sql:o,queryName:n.name.replace(".sql",""),originalFilePath:n.name})}),i=await t.json();if(i.success){window.logger.info("File decomposed successfully",i),i.decomposedQuery&&window.logger.info("Tab creation temporarily disabled - using modern components"),window.logger.info("Updating workspace display..."),await updateWorkspaceDisplay(i);const e=Object.keys(i.workspace?.privateCtes||{}).length;window.showSuccessToast(`File opened successfully (${e} Private CTEs found)`,"File Opened")}else window.logger.error("Decomposition failed:",i.error),window.showErrorToast(i.error||"Failed to decompose file","File Open Error")},t.onerror=o=>{window.logger.error("Error reading file:",o),window.showErrorToast("Failed to read file","File Read Error"),document.body.removeChild(e)},t.readAsText(n),setTimeout(()=>{document.body.contains(e)&&document.body.removeChild(e)},1e3)},window.logger.info("Triggering file dialog"),e.click(),window.logger.info("File dialog triggered")}catch(e){window.logger.error("Error in openAndDecomposeFile:",e),console.error("Open file error details:",e),window.showErrorToast(e.message||"Unknown error","File Open Error"),document.querySelectorAll('input[type="file"]').forEach(e=>{document.body.contains(e)&&document.body.removeChild(e)})}}function buildCteHierarchy(e){const o={};function n(o,t){const i=e[o];i&&i.dependencies&&i.dependencies.forEach(e=>{t.children[e]={children:{}},n(e,t.children[e])})}return window.logger.info("buildCteHierarchy called with CTEs: "+JSON.stringify(Object.keys(e))),Object.entries(e).forEach(([n,t])=>{window.logger.info(`CTE ${n} dependencies: `+JSON.stringify(t.dependencies)),Object.values(e).some(e=>e.dependencies&&e.dependencies.includes(n))||(window.logger.info(`${n} is a leaf CTE (not referenced by others) - treating as root`),o[n]={children:{}})}),Object.keys(o).forEach(e=>{n(e,o[e])}),window.logger.info(`Final tree structure: ${JSON.stringify(Object.keys(o))}`),o}function renderCteTree(e,o,n=0){let t="";return"  ".repeat(n),Object.entries(e).forEach(([e,i])=>{const r=o[e],a=Object.keys(i.children).length>0;if(!r)return window.logger.error(`CTE data missing for ${e} in privateCtes`),void window.logger.info(`Available CTEs: ${Object.keys(o).join(", ")}`);t+=`\n      <div class="cte-tree-item clickable" style="margin-left: ${20*n}px;" onclick="openPrivateCteFile('${e}')">\n        <span class="cte-tree-icon">🔧</span>\n        <span class="cte-tree-name">${e}</span>\n      </div>\n    `,a&&(t+=renderCteTree(i.children,o,n+1))}),t}function convertWSLPathToLinux(e){window.logger.info("Converting WSL path:",e);let o=e;return e.startsWith("\\\\wsl.localhost\\Ubuntu\\")&&(o=e.replace(/\\\\/g,"/"),window.logger.info("After backslash replacement:",o),o=o.replace("//wsl.localhost/Ubuntu",""),window.logger.info("After WSL prefix removal:",o),o=o.replace(/\\/g,"/"),window.logger.info("After final backslash cleanup:",o)),window.logger.info("Final normalized path:",o),o}async function openFileByPath(){try{const e=prompt("Enter file path:\n\nExamples:\n• /root/github/worktree/repositories/zosql/first_commit/sql/analytics.sql\n• ./sql/sample.sql\n• sql/query.sql\n\nWSL Path (Windows):\n• \\\\wsl.localhost\\Ubuntu\\root\\github\\...\n  → /root/github/...","/root/github/worktree/repositories/zosql/first_commit/sql/");if(!e)return;const o=convertWSLPathToLinux(e),n=await fetch(`/api/file?path=${encodeURIComponent(o)}`);if(!n.ok)throw new Error(`Failed to load file: ${n.status} ${n.statusText}`);const t=await n.text(),i=o.split("/").pop()||"unknown.sql";window.logger.info("File loaded from server, decompressing...");const r=await fetch("/api/decompose",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({sql:t,queryName:i.replace(".sql",""),originalFilePath:o})}),a=await r.json();if(a.success){window.logger.info("File decomposed successfully from path"),a.decomposedQuery&&window.logger.info("Tab creation temporarily disabled - using modern components"),await updateWorkspaceDisplay(a);const e=Object.keys(a.workspace?.privateCtes||{}).length;window.showSuccessToast(`File opened successfully from ${o} (${e} Private CTEs found)`,"File Opened")}else window.logger.error("Decomposition failed:",a.error),window.showErrorToast(a.error||"Failed to decompose file","File Open Error")}catch(e){window.logger.error("Error opening file by path:",e),window.showErrorToast(e.message||"Failed to open file","File Open Error")}}async function openPrivateCteFile(e){try{window.logger.info("Opening Private CTE file:",e);const o=await fetch(`/api/workspace/private-cte/${e}`);if(!o.ok)throw new Error(`Failed to load CTE file: ${o.status} ${o.statusText}`);const n=await o.json();if(!n.success||!n.cte)throw new Error(n.error||"Failed to load CTE");window.logger.info("CTE tab creation temporarily disabled - using modern components"),window.showSuccessToast(`Private CTE "${e}" opened successfully`,"File Opened"),n.cte.dependencies&&n.cte.dependencies.length>0&&window.showInfoToast(`Dependencies: ${n.cte.dependencies.join(", ")}`,"CTE Dependencies")}catch(e){window.logger.error("Error opening Private CTE file:",e),window.showErrorToast(e.message||"Failed to open Private CTE file","File Open Error")}}window.openAndDecomposeFile=openAndDecomposeFile,window.openFileByPath=openFileByPath,window.openPrivateCteFile=openPrivateCteFile,window.decomposeCurrentQuery=decomposeCurrentQuery,window.clearWorkspace=clearWorkspace,window.resetDatabase=resetDatabase,window.toggleCteValidationPanel=toggleCteValidationPanel,window.refreshContextPanel=refreshContextPanel,window.toggleSection=toggleSection,window.updateWorkspaceDisplay=updateWorkspaceDisplay;