let pgLiteInstance=null;export async function initializeDatabase(){try{window.logger.info("Initializing PGLite database...");const{PGlite:e}=await import("https://cdn.jsdelivr.net/npm/@electric-sql/pglite@0.2.0/dist/index.js");pgLiteInstance=new e,await pgLiteInstance.query("SELECT 1");const t=document.getElementById("pglite-status");t&&(t.textContent="Connected",t.style.color="#4caf50"),window.logger.info("PGLite database initialized successfully"),await initializeSampleData()}catch(e){window.logger.error("Failed to initialize PGLite database:",e);const t=document.getElementById("pglite-status");throw t&&(t.textContent="Error",t.style.color="#f44336"),e}}async function initializeSampleData(){try{await pgLiteInstance.query("\n      CREATE TABLE IF NOT EXISTS users (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(255) NOT NULL,\n        email VARCHAR(255) UNIQUE NOT NULL,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      );\n    "),await pgLiteInstance.query("\n      CREATE TABLE IF NOT EXISTS orders (\n        id SERIAL PRIMARY KEY,\n        user_id INTEGER REFERENCES users(id),\n        amount DECIMAL(10,2) NOT NULL,\n        order_date DATE NOT NULL,\n        status VARCHAR(50) DEFAULT 'pending',\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      );\n    "),await pgLiteInstance.query("\n      CREATE TABLE IF NOT EXISTS products (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(255) NOT NULL,\n        price DECIMAL(10,2) NOT NULL,\n        category VARCHAR(100),\n        description TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      );\n    "),await pgLiteInstance.query("\n      INSERT INTO users (name, email) VALUES \n      ('John Doe', 'john@example.com'),\n      ('Jane Smith', 'jane@example.com'),\n      ('Bob Johnson', 'bob@example.com')\n      ON CONFLICT (email) DO NOTHING;\n    "),await pgLiteInstance.query("\n      INSERT INTO products (name, price, category, description) VALUES \n      ('Laptop', 999.99, 'Electronics', 'High-performance laptop'),\n      ('Mouse', 29.99, 'Electronics', 'Wireless mouse'),\n      ('Keyboard', 79.99, 'Electronics', 'Mechanical keyboard')\n      ON CONFLICT DO NOTHING;\n    "),await pgLiteInstance.query("\n      INSERT INTO orders (user_id, amount, order_date, status) VALUES \n      (1, 999.99, '2024-01-15', 'completed'),\n      (2, 29.99, '2024-01-16', 'pending'),\n      (1, 79.99, '2024-01-17', 'completed')\n      ON CONFLICT DO NOTHING;\n    "),window.logger.info("Sample data initialized successfully")}catch(e){window.logger.warn("Error initializing sample data:",e)}}export async function executeQuery(e){if(!pgLiteInstance)throw new Error("Database not initialized");try{window.logger.info("Executing query:",e);const t=performance.now(),n=await pgLiteInstance.query(e),a=performance.now()-t;return window.logger.info("Query executed successfully",{rowCount:n.rows?.length||0,executionTime:`${a.toFixed(2)}ms`}),{success:!0,rows:n.rows||[],fields:n.fields||[],executionTime:a}}catch(e){return window.logger.error("Query execution failed:",e),{success:!1,error:e.message,executionTime:0}}}export async function resetDatabase(){try{window.logger.info("Resetting database..."),await pgLiteInstance.query("DROP TABLE IF EXISTS orders CASCADE"),await pgLiteInstance.query("DROP TABLE IF EXISTS products CASCADE"),await pgLiteInstance.query("DROP TABLE IF EXISTS users CASCADE"),await initializeSampleData(),window.logger.info("Database reset successfully")}catch(e){throw window.logger.error("Failed to reset database:",e),e}}export function getDatabaseInstance(){return pgLiteInstance}export async function checkDatabaseStatus(){const e=document.getElementById("pglite-status");if(e)try{pgLiteInstance?(await pgLiteInstance.query("SELECT 1"),e.textContent="Connected",e.style.color="#4caf50"):(e.textContent="Not initialized",e.style.color="#f44336")}catch(t){e.textContent="Error",e.style.color="#f44336"}}