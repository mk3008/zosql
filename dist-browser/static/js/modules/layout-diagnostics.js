export class LayoutDiagnostics{constructor(e){this.logger=e,this.measurements=new Map}measureElement(e,t){const i=document.querySelector(e);if(!i)return this.logger.warn(`Element not found for measurement: ${e}`),null;const o=i.getBoundingClientRect(),n=window.getComputedStyle(i),l={selector:e,label:t,timestamp:Date.now(),dimensions:{width:o.width,height:o.height,top:o.top,left:o.left,bottom:o.bottom,right:o.right},computed:{display:n.display,position:n.position,overflow:n.overflow,overflowX:n.overflowX,overflowY:n.overflowY,flex:n.flex,flexDirection:n.flexDirection,minHeight:n.minHeight,maxHeight:n.maxHeight,zIndex:n.zIndex},scroll:{scrollHeight:i.scrollHeight,scrollWidth:i.scrollWidth,scrollTop:i.scrollTop,scrollLeft:i.scrollLeft,clientHeight:i.clientHeight,clientWidth:i.clientWidth},visibility:{isVisible:o.width>0&&o.height>0,isInViewport:this.isInViewport(o),hasOverflow:i.scrollHeight>i.clientHeight||i.scrollWidth>i.clientWidth}};return this.measurements.set(t,l),this.logger.info(`Layout measurement: ${t}`,l),l}isInViewport(e){return e.top>=0&&e.left>=0&&e.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&e.right<=(window.innerWidth||document.documentElement.clientWidth)}measureAllLayouts(){const e={};return[{selector:"body",label:"body"},{selector:".header",label:"header"},{selector:".main-container",label:"main-container"},{selector:".sidebar",label:"left-sidebar"},{selector:"#workspace-panel",label:"workspace-panel"},{selector:".editor-panel",label:"editor-panel"},{selector:".monaco-editor-section",label:"monaco-editor-section"},{selector:".monaco-toolbar",label:"monaco-toolbar"},{selector:"#left-monaco-editor",label:"left-monaco-editor"},{selector:".monaco-editor",label:"monaco-editor-instance"},{selector:".panel-results-container",label:"results-container"}].forEach(({selector:t,label:i})=>{const o=this.measureElement(t,i);o&&(e[i]=o)}),this.calculateRelativePositions(e),e}calculateRelativePositions(e){if(!e.body)return;const t={width:window.innerWidth,height:window.innerHeight};this.logger.info("Viewport dimensions",t);const i=[],o=Object.keys(e);for(let t=0;t<o.length;t++)for(let n=t+1;n<o.length;n++){const l=e[o[t]],s=e[o[n]];this.elementsOverlap(l.dimensions,s.dimensions)&&i.push({element1:o[t],element2:o[n],overlap:this.calculateOverlap(l.dimensions,s.dimensions)})}i.length>0&&this.logger.warn("Overlapping elements detected",i);const n=[];Object.entries(e).forEach(([e,i])=>{i.visibility.isInViewport||n.push({label:e,position:{top:i.dimensions.top,bottom:i.dimensions.bottom,outsideTop:i.dimensions.top<0,outsideBottom:i.dimensions.bottom>t.height,outsideLeft:i.dimensions.left<0,outsideRight:i.dimensions.right>t.width}})}),n.length>0&&this.logger.warn("Elements outside viewport",n)}elementsOverlap(e,t){return!(e.right<t.left||e.left>t.right||e.bottom<t.top||e.top>t.bottom)}calculateOverlap(e,t){const i=Math.max(0,Math.min(e.right,t.right)-Math.max(e.left,t.left)),o=Math.max(0,Math.min(e.bottom,t.bottom)-Math.max(e.top,t.top));return{area:i*o,width:i,height:o}}monitorElement(e,t,i){const o=document.querySelector(e);if(!o)return void this.logger.warn(`Cannot monitor: element not found ${e}`);const n=new MutationObserver(o=>{const n=this.measureElement(e,t);n&&i&&i(n,o)});n.observe(o,{attributes:!0,attributeFilter:["style","class"],childList:!0,subtree:!0});const l=new ResizeObserver(i=>{const o=this.measureElement(e,t);this.logger.info(`Element resized: ${t}`,{oldSize:i[0].contentRect,newMeasurement:o})});return l.observe(o),{mutationObserver:n,resizeObserver:l}}getSummaryReport(){const e=Array.from(this.measurements.values());return{totalElements:e.length,visibleElements:e.filter(e=>e.visibility.isVisible).length,elementsInViewport:e.filter(e=>e.visibility.isInViewport).length,elementsWithOverflow:e.filter(e=>e.visibility.hasOverflow).length,averageHeight:e.reduce((e,t)=>e+t.dimensions.height,0)/e.length,totalViewportUsage:{width:Math.max(...e.map(e=>e.dimensions.right)),height:Math.max(...e.map(e=>e.dimensions.bottom))}}}}window.LayoutDiagnostics=LayoutDiagnostics;