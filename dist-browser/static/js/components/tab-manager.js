export class TabManagerComponent{constructor(t,e={}){this.container=t,this.tabs=new Map,this.activeTabId=null,this.tabCounter=0,this.onTabChange=e.onTabChange||(()=>{}),this.onTabClose=e.onTabClose||(()=>{}),this.onNewTab=e.onNewTab||(()=>{}),this.config={maxTabs:10,closableByDefault:!0,showNewTabButton:!0,...e},this.init()}init(){this.container.classList.add("tab-container"),this.createDefaultTab(),this.render()}createDefaultTab(){this.createTab({name:"New Query",content:"",type:"sql",closable:!0})}createTab(t){if(this.tabs.size>=this.config.maxTabs)throw new Error(`Maximum ${this.config.maxTabs} tabs allowed`);const e="tab-"+ ++this.tabCounter,a={id:e,name:t.name||`Tab ${this.tabCounter}`,content:t.content||"",type:t.type||"default",closable:!1!==t.closable,created:new Date,...t};return this.tabs.set(e,a),this.render(),this.setActiveTab(e),e}createOrActivateTab(t){const e=this.findTabByName(t.name);return e?(this.setActiveTab(e.id),e.id):this.createTab(t)}findTabByName(t){for(const e of this.tabs.values())if(e.name===t)return e;return null}closeTab(t){const e=this.tabs.get(t);if(!e)return!1;if(!e.closable)return!1;if(this.tabs.delete(t),this.activeTabId===t){const t=Array.from(this.tabs.keys());this.activeTabId=t.length>0?t[t.length-1]:null}return this.render(),this.onTabClose(t,e),this.activeTabId&&this.onTabChange(this.activeTabId,this.tabs.get(this.activeTabId)),this.controlMonacoEditor(),!0}setActiveTab(t){if(!this.tabs.has(t))return!1;const e=this.activeTabId;return this.activeTabId=t,this.updateTabDisplay(),e!==t&&this.onTabChange(t,this.tabs.get(t)),this.controlMonacoEditor(),!0}updateTab(t,e){const a=this.tabs.get(t);return!!a&&(Object.assign(a,e),this.render(),!0)}clearAllTabs(){this.tabs.clear(),this.activeTabId=null,this.render()}render(){let t=`\n      <div class="tab-bar">\n        <div class="tab-list">\n          ${this.renderTabs()}\n        </div>\n        <div class="tab-controls">\n          ${this.renderControls()}\n        </div>\n      </div>\n      <div class="tab-content">\n        ${this.renderContent()}\n      </div>\n    `;this.container.innerHTML=t,this.attachEventListeners()}renderTabs(){return Array.from(this.tabs.values()).map(t=>`\n        <div class="tab${t.id===this.activeTabId?" active":""}" data-tab-id="${t.id}">\n          <span class="tab-name" title="${t.name}">${t.name}</span>\n          ${t.closable?`<span class="tab-close" data-tab-id="${t.id}">Ã—</span>`:""}\n        </div>\n      `).join("")}renderControls(){let t="";return this.config.showNewTabButton&&(t+='<button class="new-tab-btn" title="New Tab">+</button>'),t}renderContent(){if(this.controlMonacoEditor(),!this.activeTabId)return'<div class="tab-content-empty">No tab selected</div>';const t=this.tabs.get(this.activeTabId);return t?`\n      <div class="tab-content-active" data-tab-id="${t.id}">\n        ${t.content||""}\n      </div>\n    `:'<div class="tab-content-error">Tab not found</div>'}controlMonacoEditor(){const t=document.querySelector(".monaco-editor-section");if(t)if(this.activeTabId&&this.tabs.has(this.activeTabId)){t.style.display="flex";const e=this.tabs.get(this.activeTabId),a=document.querySelector("monaco-editor");a&&a.component&&a.component.setValue(e.content||"")}else t.style.display="none"}updateTabDisplay(){this.container.querySelectorAll(".tab").forEach(t=>{t.dataset.tabId===this.activeTabId?t.classList.add("active"):t.classList.remove("active")});const t=this.container.querySelector(".tab-content");t&&(t.innerHTML=this.renderContent()),this.controlMonacoEditor()}attachEventListeners(){this.container.addEventListener("click",t=>{const e=t.target.closest(".tab");e&&!t.target.classList.contains("tab-close")&&this.setActiveTab(e.dataset.tabId)}),this.container.addEventListener("click",t=>{t.target.classList.contains("tab-close")&&(t.stopPropagation(),this.closeTab(t.target.dataset.tabId))}),this.container.addEventListener("click",t=>{t.target.classList.contains("new-tab-btn")&&this.onNewTab()}),document.addEventListener("keydown",t=>{if(t.ctrlKey||t.metaKey)switch(t.key){case"w":this.activeTabId&&(t.preventDefault(),this.closeTab(this.activeTabId));break;case"t":t.preventDefault(),this.onNewTab()}})}getTab(t){return this.tabs.get(t)}getActiveTab(){return this.activeTabId?this.tabs.get(this.activeTabId):null}getAllTabs(){return Array.from(this.tabs.values())}getDebugInfo(){return{tabCount:this.tabs.size,activeTabId:this.activeTabId,tabs:this.getAllTabs().map(t=>({id:t.id,name:t.name,type:t.type}))}}destroy(){this.clearAllTabs(),this.container&&(this.container.innerHTML="")}}export class TabManagerElement extends HTMLElement{constructor(){super(),this.component=null}connectedCallback(){this.component=new TabManagerComponent(this,{onTabChange:(t,e)=>{this.dispatchEvent(new CustomEvent("tab-change",{detail:{tabId:t,tab:e},bubbles:!0}))},onTabClose:(t,e)=>{this.dispatchEvent(new CustomEvent("tab-close",{detail:{tabId:t,tab:e},bubbles:!0}))},onNewTab:()=>{this.dispatchEvent(new CustomEvent("new-tab",{bubbles:!0}))}})}disconnectedCallback(){this.component&&this.component.destroy()}createTab(t){return this.component?.createTab(t)}createOrActivateTab(t){return this.component?.createOrActivateTab(t)}closeTab(t){return this.component?.closeTab(t)}setActiveTab(t){return this.component?.setActiveTab(t)}}"undefined"!=typeof customElements&&customElements.define("tab-manager",TabManagerElement),window.TabManagerComponent=TabManagerComponent;