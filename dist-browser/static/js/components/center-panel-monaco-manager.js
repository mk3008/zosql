export class CenterPanelMonacoManager{constructor(o,e=new Map){this.shadowRoot=o,this.callbacks=e,this.monacoEditors=new Map,this.externalContainers=new Map}setupMonacoEditor(o,e){console.log(`[MonacoManager] setupMonacoEditor called for tab: ${o}`);const t=this.shadowRoot.getElementById(`editor-${o}`);t?t.dataset.monacoInitialized?console.log(`[MonacoManager] Monaco Editor already initialized for tab: ${o}`):(t.dataset.monacoInitializing="true",console.log("[MonacoManager] Setting up Monaco Editor for tab:",o),this.waitForMonaco().then(()=>{this.createMonacoEditor(o,e,t)}).catch(o=>{console.error("[MonacoManager] Monaco Editor load timeout:",o),t.innerHTML=`\n        <div style="padding: 20px; text-align: center; color: #f44336; background: #2d2d2d; border-radius: 4px;">\n          <h3>Monaco Editor Load Failed</h3>\n          <p>${o.message}</p>\n          <p>Please check the Monaco Editor setup in your HTML.</p>\n          <button onclick="location.reload()" style="padding: 8px 16px; margin-top: 10px; background: #007acc; color: white; border: none; border-radius: 3px; cursor: pointer;">\n            Reload Page\n          </button>\n        </div>\n      `,delete t.dataset.monacoInitializing})):console.warn(`[MonacoManager] Editor container not found for tab: ${o}`)}createMonacoEditor(o,e,t){try{const n=document.createElement("div");n.id=`monaco-external-${o}`,n.style.position="absolute",n.style.top="0",n.style.left="0",n.style.zIndex="1";const a=o===e.tabManager.activeTabId;n.style.display="block",a||(n.style.top="-10000px",n.style.left="-10000px"),n.setAttribute("data-tab-id",o),n.setAttribute("data-debug-info","Monaco Editor (External DOM)"),document.body.appendChild(n),e.tabManager.tabs.get(o);const i=e.getFileModelForTab(o),r=i?i.getContent():"-- Start writing your SQL query here\nSELECT * FROM users\nLIMIT 10;",c=window.monaco.editor.create(n,{value:r,language:"sql",theme:"vs-dark",automaticLayout:!1,minimap:{enabled:!1},scrollBeyondLastLine:!1,fontSize:14,lineNumbers:"on",glyphMargin:!1,folding:!0,lineDecorationsWidth:10,renderLineHighlight:"line",selectionHighlight:!1,wordWrap:"off",contextmenu:!0,mouseWheelZoom:!0});this.setupPositionSync(o,e,t,n,c),c.addCommand(monaco.KeyMod.CtrlCmd|monaco.KeyCode.Enter,()=>{console.log("[Monaco] Ctrl+Enter pressed in tab:",o),e.handleToolbarAction("run")}),c.addCommand(monaco.KeyMod.CtrlCmd|monaco.KeyMod.Shift|monaco.KeyCode.KeyF,()=>{console.log("[Monaco] Ctrl+Shift+F pressed in tab:",o),e.handleToolbarAction("format")}),c.addCommand(monaco.KeyMod.CtrlCmd|monaco.KeyCode.KeyS,()=>{console.log("[Monaco] Ctrl+S pressed in tab:",o),e.handleToolbarAction("save")}),t.monacoEditor=c,t.dataset.monacoInitialized="true",this.monacoEditors.set(o,c),this.externalContainers.set(o,n),delete t.dataset.monacoInitializing,i&&c.onDidChangeModelContent(t=>{const n=c.getValue();e.updateTabContent(o,n,"monaco")}),console.log("[MonacoManager] Monaco Editor initialized successfully for tab:",o),this.triggerCallback("monaco-editor-created",{tabId:o,editor:c,fileModel:i})}catch(o){console.error("[MonacoManager] Monaco Editor creation failed:",o),t.innerHTML=`<div style="padding: 20px; color: #f44336;">Monaco Editor initialization failed: ${o.message}</div>`,delete t.dataset.monacoInitializing}}setupPositionSync(o,e,t,n,a){let i=!1;const r=()=>{if(i)return;console.log("[MonacoManager] syncPosition called for tab",o);const e=t.getBoundingClientRect();e.width>0&&e.height>0&&(i=!0,n.style.left=e.left+"px",n.style.top=e.top+"px",n.style.width=e.width+"px",n.style.height=e.height+"px",a&&a.layout({width:e.width,height:e.height}),setTimeout(()=>{i=!1},10))};let c,s;setTimeout(r,100),window.addEventListener("resize",()=>{clearTimeout(c),c=setTimeout(r,50)}),document.addEventListener("sidebar-toggled",r);const l=new MutationObserver(()=>{clearTimeout(s),s=setTimeout(r,100)});l.observe(t,{attributes:!0,attributeFilter:["style","class"],childList:!1,subtree:!1});const d=this.shadowRoot.querySelector(".splitter");d&&d.addEventListener("mousedown",()=>{let o;const e=()=>{clearTimeout(o),o=setTimeout(r,16)},t=()=>{document.removeEventListener("mousemove",e),document.removeEventListener("mouseup",t),r()};document.addEventListener("mousemove",e),document.addEventListener("mouseup",t)});const g=setInterval(()=>{if(o===e.tabManager.activeTabId&&!i){const o=t.getBoundingClientRect();o.width>0&&o.height>0&&r()}},1e3);t.externalContainer=n,t.positionSync=r,t.resizeObserver=l,t.syncInterval=g,console.log("[MonacoManager] Position sync setup completed for tab:",o)}waitForMonaco(o=15e3){return new Promise((e,t)=>{if(void 0!==window.monaco&&window.monaco.editor)return console.log("[MonacoManager] Monaco Editor already available"),void e();if(window.monacoLoaded)return console.log("[MonacoManager] Monaco Editor loaded flag detected"),void e();const n=()=>{console.log("[MonacoManager] Monaco Editor loaded via event"),window.removeEventListener("monaco-loaded",n),e()};window.addEventListener("monaco-loaded",n),setTimeout(()=>{window.removeEventListener("monaco-loaded",n),t(new Error("Monaco Editor load timeout after "+o+"ms"))},o)})}getMonacoEditor(o){return this.monacoEditors.get(o)}setMonacoEditor(o,e){this.monacoEditors.set(o,e)}cleanupMonacoEditor(o){const e=this.monacoEditors.get(o);e&&(e.dispose(),this.monacoEditors.delete(o),console.log(`[MonacoManager] Disposed Monaco Editor for tab ${o}`));const t=this.externalContainers.get(o);if(t){const e=this.shadowRoot.getElementById(`editor-${o}`);e&&(e.syncInterval&&clearInterval(e.syncInterval),e.resizeObserver&&e.resizeObserver.disconnect()),t.remove(),this.externalContainers.delete(o),console.log(`[MonacoManager] Removed external container for tab ${o}`)}}syncActiveMonacoEditor(o){if(!o)return;console.log(`[MonacoManager] Syncing Monaco Editor for active tab: ${o}`);const e=this.externalContainers.get(o);if(!e)return void console.warn(`[MonacoManager] External container not found for active tab: ${o}`);const t=this.monacoEditors.get(o);if(!t)return void console.warn(`[MonacoManager] Monaco Editor instance not found for active tab: ${o}`);"none"===e.style.display&&(console.log(`[MonacoManager] Making external container visible for tab: ${o}`),e.style.display="block");const n=this.shadowRoot.getElementById(`editor-${o}`);n&&n.positionSync&&(console.log(`[MonacoManager] Executing position sync for tab: ${o}`),n.positionSync()),setTimeout(()=>{t&&(t.layout(),console.log(`[MonacoManager] Monaco Editor layout updated for tab: ${o}`))},50)}updateExternalContainerVisibility(o,e){0===e.length?document.querySelectorAll('[id^="monaco-external-"]').forEach(o=>{o.style.display="none"}):document.querySelectorAll('[id^="monaco-external-"]').forEach(t=>{const n=t.id.replace("monaco-external-","");n===o?t.style.display="block":e.includes(n)&&(t.style.display="none")})}debugMonacoEditor(o){if(console.log("[MonacoManager] Debug Monaco Editor:"),console.log("  - Active tab:",o),console.log("  - Monaco editors count:",this.monacoEditors.size),console.log("  - External containers count:",this.externalContainers.size),console.log("  - Monaco available:","undefined"!=typeof monaco),o){const e=this.shadowRoot.getElementById(`editor-${o}`),t=this.externalContainers.get(o),n=this.monacoEditors.get(o);console.log("  - Editor container:",!!e),console.log("  - Monaco initialized:",e?.dataset.monacoInitialized),console.log("  - Monaco instance:",!!n),console.log("  - External container:",!!t)}}triggerCallback(o,e=null){const t=this.callbacks.get(o);t&&t(e)}destroy(){this.monacoEditors.forEach((o,e)=>{this.cleanupMonacoEditor(e)}),this.monacoEditors.clear(),this.externalContainers.clear(),console.log("[MonacoManager] Destroyed")}}