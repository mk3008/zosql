import{fileModelManager}from"../models/file-model-manager.js";import{CenterPanelStyles}from"./center-panel-styles.js";import{CenterPanelTabManager}from"./center-panel-tab-manager.js";import{CenterPanelMonacoManager}from"./center-panel-monaco-manager.js";import{CenterPanelSplitterManager}from"./center-panel-splitter-manager.js";export class CenterPanelShadowComponent{constructor(t,e={}){this.shadowRoot=t,this.callbacks=new Map,this.config={maxTabs:15,enableScrolling:!0,enableSplitter:!0,defaultSplitRatio:.6,...e},this.tabManager=new CenterPanelTabManager(t,this.callbacks,{maxTabs:this.config.maxTabs,enableScrolling:this.config.enableScrolling}),this.monacoManager=new CenterPanelMonacoManager(t,this.callbacks),this.splitterManager=new CenterPanelSplitterManager(t,this.callbacks,{defaultSplitRatio:this.config.defaultSplitRatio,enableSplitter:this.config.enableSplitter}),this.init()}init(){console.log("[CenterPanelShadow] Initializing..."),this.render(),console.log("[CenterPanelShadow] Rendered"),setTimeout(()=>{const t=this.createDefaultTab();console.log("[CenterPanelShadow] Default tab created after render:",t)},100),this.setupEventListeners(),console.log("[CenterPanelShadow] Event listeners setup"),console.log("[CenterPanelShadow] Initialized with",this.tabManager.getTabCount(),"tabs")}getStyles(){return CenterPanelStyles.getStyles()}render(){const t=`\n      ${this.getStyles()}\n      <div class="tab-bar">\n        <button class="tab-scroll-btn" id="scroll-left" title="Scroll Left">â—€</button>\n        <div class="tab-scroll-container" id="tab-scroll-container">\n          <div class="tab-list" id="tab-list">\n            ${this.renderTabs()}\n          </div>\n        </div>\n        <button class="tab-scroll-btn" id="scroll-right" title="Scroll Right">â–¶</button>\n        <div class="tab-controls">\n          <button class="new-tab-btn" id="new-tab-btn" title="New Tab (Ctrl+T)">+</button>\n        </div>\n      </div>\n      <div class="tab-content-area" id="tab-content-area">\n        ${this.renderTabContents()}\n      </div>\n    `;this.shadowRoot.innerHTML=t}renderTabs(){return this.tabManager.renderTabs()}renderTabContents(){return 0===this.tabManager.getTabCount()?this.renderEmptyState():this.tabManager.getAllTabs().map(t=>`\n        <div class="tab-content${t.id===this.tabManager.activeTabId?" active":""}" data-tab-id="${t.id}">\n          ${this.renderTabContent(t)}\n        </div>\n      `).join("")}renderTabContent(t){return"sql"!==t.type&&"private-cte"!==t.type&&"shared-cte"!==t.type&&"main-file"!==t.type&&"main"!==t.type&&t.type?`<div class="tab-content-placeholder">Content type: ${t.type}</div>`:this.renderSQLTabContent(t)}renderSQLTabContent(t){const e=this.splitterManager.getSplitterPosition(),a=100*(1-e);return`\n      <div class="split-layout">\n        <div class="editor-section" style="height: ${100*e}%">\n          <div class="editor-toolbar">\n            <button class="toolbar-btn primary" data-action="run" title="Run Query (Ctrl+Enter)">\n              â–¶ Run\n            </button>\n            <button class="toolbar-btn" data-action="format" title="Format SQL (Ctrl+Shift+F)">\n              ðŸŽ¨ Format\n            </button>\n            <button class="toolbar-btn" data-action="save" title="Save (Ctrl+S)">\n              ðŸ’¾ Save\n            </button>\n            <div style="flex: 1;"></div>\n            <span class="tab-info">${this.getTabClassification(t)}</span>\n          </div>\n          <div class="editor-container" id="editor-${t.id}">\n            \x3c!-- Monaco Editor will be mounted here --\x3e\n          </div>\n        </div>\n        \n        <div class="splitter" data-tab-id="${t.id}"></div>\n        \n        <div class="results-section" style="height: ${a}%">\n          <div class="results-header">\n            <span>Query Results</span>\n            <div class="results-controls">\n              \x3c!--<button class="toolbar-btn" data-action="export" title="Export Results">\n                ðŸ“¤ Export\n              </button>\n              <button class="toolbar-btn" data-action="clear" title="Clear Results">\n                Clear\n              </button> --\x3e\n            </div>\n          </div>\n          <div class="results-content" id="results-${t.id}">\n            <div class="results-placeholder">\n              Run a query to see results here\n            </div>\n          </div>\n        </div>\n      </div>\n    `}renderEmptyState(){return'\n      <div class="empty-tabs">\n        <div class="empty-tabs-icon">[EDITOR]</div>\n        <div class="empty-tabs-title">No tabs open</div>\n        <div class="empty-tabs-subtitle">Click the + button to create a new tab</div>\n      </div>\n    '}setupEventListeners(){this.shadowRoot.addEventListener("click",t=>{const e=t.target.closest(".tab");e&&!t.target.classList.contains("tab-close")&&(this.tabManager.setActiveTab(e.dataset.tabId),this.updateActiveTabDisplay())}),this.shadowRoot.addEventListener("click",t=>{if(t.target.classList.contains("tab-close")){t.stopPropagation();const e=t.target.dataset.tabId;console.log("[CenterPanelShadow] Tab close clicked:",e);const a=this.tabManager.closeTab(e);console.log("[CenterPanelShadow] Tab close result:",a)}});const t=this.shadowRoot.getElementById("new-tab-btn");t&&t.addEventListener("click",()=>this.tabManager.createNewTab()),this.setupTabManagerCallbacks(),this.setupSplitterManagerCallbacks(),this.setupToolbarActions(),this.setupToolbarKeyboardShortcuts()}setupTabManagerCallbacks(){this.tabManager.callbacks.set("tab-rerender-needed",()=>{this.updateTabsOnly()}),this.tabManager.callbacks.set("tab-created",t=>{this.updateTabsOnly(),this.triggerCallback("tab-created",t)}),this.tabManager.callbacks.set("tab-changed",t=>{this.updateActiveTabDisplay(),this.triggerCallback("tab-changed",t)}),this.tabManager.callbacks.set("tab-closed",t=>{if(console.log("[CenterPanelShadow] tab-closed callback received:",t),this.monacoManager.cleanupMonacoEditor(t.tabId),t.needsRerender){const e=this.shadowRoot.querySelector(`[data-tab-id="${t.tabId}"]`);console.log("[CenterPanelShadow] Tab element found for removal:",!!e),e&&e.remove();const a=this.shadowRoot.querySelector(`.tab-content[data-tab-id="${t.tabId}"]`);if(console.log("[CenterPanelShadow] Tab content found for removal:",!!a),a&&a.remove(),0===this.tabManager.getTabCount()){const t=this.shadowRoot.getElementById("tab-content-area");t&&(t.innerHTML=this.renderEmptyState())}this.updateActiveTabDisplay(),this.tabManager.updateScrollButtons(),console.log("[CenterPanelShadow] Tab removal completed")}this.triggerCallback("tab-closed",t)}),this.tabManager.setupTabScrolling(),this.tabManager.setupTabWheelScroll(),this.tabManager.setupKeyboardShortcuts()}setupSplitterManagerCallbacks(){this.splitterManager.setupSplitter(),this.splitterManager.loadState(),this.splitterManager.callbacks.set("splitter-layout-updated",t=>{this.monacoManager.syncActiveMonacoEditor(this.tabManager.activeTabId)}),this.splitterManager.callbacks.set("splitter-drag-end",t=>{setTimeout(()=>{this.monacoManager.syncActiveMonacoEditor(this.tabManager.activeTabId)},50)})}setupToolbarActions(){this.shadowRoot.addEventListener("click",t=>{const e=t.target.closest("[data-action]");if(e){const t=e.dataset.action;this.handleToolbarAction(t)}})}handleToolbarAction(t){const e=this.getActiveTab();if(e)switch(t){case"run":this.triggerCallback("run-query",{tabId:e.id,tab:e});break;case"format":this.triggerCallback("format-sql",{tabId:e.id,tab:e});break;case"save":this.triggerCallback("save-tab",{tabId:e.id,tab:e});break;case"export":this.triggerCallback("export-results",{tabId:e.id,tab:e});break;case"clear":this.clearResults(e.id)}}setupToolbarKeyboardShortcuts(){document.addEventListener("keydown",t=>{(t.ctrlKey||t.metaKey)&&("Enter"===t.key?(t.preventDefault(),this.handleToolbarAction("run")):t.shiftKey&&"F"===t.key&&(t.preventDefault(),this.handleToolbarAction("format")))})}createNewTab(t={}){return this.tabManager.createNewTab(t)}createDefaultTab(){return this.tabManager.createDefaultTab()}findTabByName(t){return this.tabManager.findTabByName(t)}createOrReuseTabForFile(t,e,a={}){return this.tabManager.createOrReuseTabForFile(t,e,a)}getFileModelForTab(t){return this.tabManager.getFileModelForTab(t)}getTabForFileModel(t){return this.tabManager.getTabForFileModel(t)}updateTabContent(t,e,a="user"){const n=this.tabManager.updateTabContent(t,e,a);if(n){const n=this.monacoManager.getMonacoEditor(t);n&&"monaco"!==a&&n.setValue(e)}return n}updateTabModificationState(t){return this.tabManager.updateTabModificationState(t)}closeTab(t){return this.tabManager.closeTab(t)}getTabClassification(t){return"shared-cte"===t.type||"private-cte"===t.type?"CTE":("main-file"===t.type||t.type,"MAIN")}setActiveTab(t){return this.tabManager.setActiveTab(t)}updateTabsOnly(){const t=this.shadowRoot.getElementById("tab-list");t&&(t.innerHTML=this.renderTabs());const e=this.shadowRoot.getElementById("tab-content-area");e&&(e.innerHTML=this.renderTabContents()),this.updateActiveTabDisplay()}updateActiveTabDisplay(){this.shadowRoot.querySelectorAll(".tab").forEach(t=>{const e=t.dataset.tabId;t.classList.toggle("active",e===this.tabManager.activeTabId)}),this.shadowRoot.querySelectorAll(".tab-content").forEach(t=>{const e=t.dataset.tabId===this.tabManager.activeTabId;t.classList.toggle("active",e)}),this.monacoManager.updateExternalContainerVisibility(this.tabManager.activeTabId,this.tabManager.getAllTabs().map(t=>t.id)),this.splitterManager.updateSplitterLayout()}rerender(){const t={scrollPosition:this.tabManager.state.scrollPosition,splitterPosition:this.splitterManager.getSplitterPosition()};this.render(),this.setupEventListeners(),this.tabManager.state.scrollPosition=t.scrollPosition,this.splitterManager.setSplitterPosition(t.splitterPosition),this.updateActiveTabDisplay(),this.tabManager.updateScrollButtons()}clearResults(t){const e=this.shadowRoot.getElementById(`results-${t}`);e&&(e.innerHTML='\n        <div class="results-placeholder">\n          Run a query to see results here\n        </div>\n      ')}saveState(){this.splitterManager.saveState()}loadState(){this.splitterManager.loadState()}onCallback(t,e){this.callbacks.set(t,e)}triggerCallback(t,e=null){const a=this.callbacks.get(t);a&&a(e),this.shadowRoot.host.dispatchEvent(new CustomEvent(`center-${t}`,{detail:e,bubbles:!0}))}getActiveTab(){return this.tabManager.getActiveTab()}getAllTabs(){return this.tabManager.getAllTabs()}syncActiveMonacoEditor(){return this.monacoManager.syncActiveMonacoEditor(this.tabManager.activeTabId)}setMonacoEditor(t,e){this.monacoManager.setMonacoEditor(t,e)}getMonacoEditor(t){return this.monacoManager.getMonacoEditor(t)}setSplitterPosition(t){return this.splitterManager.setSplitterPosition(t)}getSplitterPosition(){return this.splitterManager.getSplitterPosition()}resetSplitterPosition(){return this.splitterManager.resetSplitterPosition()}destroy(){this.callbacks.clear(),this.tabManager&&this.tabManager.destroy(),this.monacoManager&&this.monacoManager.destroy(),this.splitterManager&&this.splitterManager.destroy(),console.log("[CenterPanelShadow] Destroyed")}}export class CenterPanelShadowElement extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.component=null}connectedCallback(){this.component=new CenterPanelShadowComponent(this.shadowRoot),this.component.onCallback("tab-created",t=>{console.log("[CenterPanelShadow] Tab created:",t),this.component.monacoManager.setupMonacoEditor(t.tabId,this.component),this.dispatchEvent(new CustomEvent("tab-created",{detail:t,bubbles:!0}))}),this.component.onCallback("tab-closed",t=>{this.dispatchEvent(new CustomEvent("tab-closed",{detail:t,bubbles:!0}))}),this.component.onCallback("tab-changed",t=>{console.log("[CenterPanelShadow] Tab changed:",t),this.component.monacoManager.setupMonacoEditor(t.tabId,this.component),this.dispatchEvent(new CustomEvent("tab-changed",{detail:t,bubbles:!0}))}),this.component.onCallback("run-query",t=>{this.dispatchEvent(new CustomEvent("run-query",{detail:t,bubbles:!0}))}),this.component.onCallback("format-sql",t=>{this.dispatchEvent(new CustomEvent("format-sql",{detail:t,bubbles:!0}))}),this.component.onCallback("save-tab",t=>{this.dispatchEvent(new CustomEvent("save-tab",{detail:t,bubbles:!0}))}),setTimeout(()=>{const t=this.component.getActiveTab();if(t){const e=this.shadowRoot.getElementById(`editor-${t.id}`);e&&!e.dataset.monacoInitialized&&(console.log("[CenterPanelShadow] Fallback Monaco setup for tab:",t.id),this.component.monacoManager.setupMonacoEditor(t.id,this.component))}},800)}disconnectedCallback(){document.querySelectorAll('[id^="monaco-external-"]').forEach(t=>{const e=this.shadowRoot.querySelector(`[data-external-id="${t.id}"]`);e&&e.syncInterval&&clearInterval(e.syncInterval),t.parentNode&&t.parentNode.removeChild(t)}),this.component&&(this.component.destroy(),this.component=null)}setupMonacoEditor(t){return this.component.monacoManager.setupMonacoEditor(t,this.component)}createNewTab(t){return this.component?.createNewTab(t)}createOrReuseTabForFile(t,e,a={}){return this.component?.createOrReuseTabForFile(t,e,a)}updateTabContent(t,e,a="user"){return this.component?.updateTabContent(t,e,a)}getFileModelForTab(t){return this.component?.getFileModelForTab(t)}closeTab(t){return this.component?.closeTab(t)}setActiveTab(t){return this.component?.setActiveTab(t)}getActiveTab(){return this.component?.getActiveTab()}getAllTabs(){return this.component?.getAllTabs()}getMonacoEditor(t){return this.component?.getMonacoEditor(t)}getActiveTabContent(){const t=this.component?.getActiveTab();if(!t)return null;const e=this.component?.getMonacoEditor(t.id);return e?.getValue()||null}debugMonacoEditor(){const t=this.component?.getActiveTab();this.component?.monacoManager.debugMonacoEditor(t?.id)}}"undefined"!=typeof customElements&&customElements.define("center-panel-shadow",CenterPanelShadowElement),window.CenterPanelShadowComponent=CenterPanelShadowComponent,window.debugCenterPanel=()=>{const t=document.getElementById("center-panel-shadow");t&&t.debugMonacoEditor?t.debugMonacoEditor():console.log("[Debug] Center panel not found or not initialized")},window.forceMonacoSetup=()=>{const t=document.getElementById("center-panel-shadow");if(t&&t.component){const e=t.component.getActiveTab();e?(t.component.monacoManager.setupMonacoEditor(e.id,t.component),console.log("[Debug] Forced Monaco setup for tab:",e.id)):console.log("[Debug] No active tab found")}else console.log("[Debug] Center panel component not found")};