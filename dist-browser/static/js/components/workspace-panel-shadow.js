import{ShadowComponentBase,ShadowElementBase}from"./base/shadow-component-base.js";export class WorkspacePanelShadowComponent extends ShadowComponentBase{beforeInit(){this.sections=new Map,this.cteTreeComponent=null,this.cteDependencyData=null,this.validationResults=null,this.isValidating=!1}getDefaultConfig(){return{defaultSections:["workspace"],collapsible:!0,persistState:!0}}getEventPrefix(){return"workspace-panel"}getStateKey(){return"workspace-panel-state"}getStyles(){return'\n      <style>\n        :host {\n          display: flex;\n          flex-direction: column;\n          background: var(--bg-secondary, #f9fafb);\n          height: 100%;\n          width: 100%;\n          overflow-y: auto;\n          font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', system-ui, sans-serif;\n          flex-shrink: 0;\n        }\n        \n        .workspace-section {\n          border-bottom: 1px solid var(--border-primary, #e5e7eb);\n          padding: 8px;\n        }\n        \n        .workspace-header {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          cursor: pointer;\n          user-select: none;\n          font-weight: 500;\n          color: var(--text-primary, #111827);\n          font-size: 14px;\n          margin-bottom: 8px;\n          transition: color 0.2s;\n        }\n        \n        .workspace-header:hover {\n          color: var(--text-accent, #3b82f6);\n        }\n        \n        .workspace-content {\n          font-size: 14px;\n          color: var(--text-secondary, #6b7280);\n        }\n        \n        .collapse-icon {\n          transition: transform 0.2s;\n          font-size: 12px;\n        }\n        \n        .workspace-section.collapsed .collapse-icon {\n          transform: rotate(0deg);\n        }\n        \n        .workspace-section:not(.collapsed) .collapse-icon {\n          transform: rotate(90deg);\n        }\n        \n        .workspace-section.collapsed .workspace-content {\n          display: none;\n        }\n        \n        .table-item {\n          display: flex;\n          align-items: center;\n          padding: 6px 8px;\n          font-size: 14px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n          border-radius: 4px;\n          margin: 2px 0;\n        }\n        \n        .table-item:hover:not(.active) {\n          background-color: var(--bg-hover, #f3f4f6);\n        }\n        \n        .table-item.active {\n          background-color: var(--bg-accent, #3b82f6);\n          color: white;\n        }\n        \n        .table-icon {\n          margin-right: 8px;\n          font-size: 16px;\n        }\n        \n        .table-name {\n          font-weight: 500;\n          color: var(--text-primary, #111827);\n          font-size: 14px;\n          flex: 1;\n        }\n        \n        .table-item.active .table-name {\n          color: white;\n        }\n        \n        .table-columns {\n          color: var(--text-muted, #6b7280);\n          font-size: 12px;\n          margin-left: auto;\n        }\n        \n        .table-item.active .table-columns {\n          color: var(--text-accent-light, #e5e7eb);\n        }\n        \n        .workspace-title {\n          font-weight: 500;\n          color: var(--text-primary, #111827);\n          font-size: 14px;\n        }\n        \n        .cte-container {\n          margin-top: 8px;\n        }\n        \n        .cte-item {\n          display: flex;\n          align-items: center;\n          padding: 4px 8px;\n          font-size: 13px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n          border-radius: 4px;\n          margin: 1px 0;\n          margin-left: 12px;\n        }\n        \n        .cte-item:hover {\n          background-color: var(--bg-hover, #f3f4f6);\n        }\n        \n        .cte-icon {\n          margin-right: 6px;\n          font-size: 14px;\n        }\n        \n        .cte-name {\n          font-weight: 400;\n          color: var(--text-secondary, #6b7280);\n        }\n        \n        /* CTE Tree Styles - 依存関係ツリー表示 */\n        .cte-tree-wrapper {\n          margin-top: 8px;\n        }\n        \n        .cte-tree-item {\n          display: flex;\n          align-items: center;\n          padding: 4px 8px;\n          font-size: 13px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n          border-radius: 4px;\n          margin: 1px 0;\n        }\n        \n        .cte-tree-item:hover:not(.active) {\n          background-color: var(--bg-hover, #f3f4f6);\n        }\n        \n        .cte-tree-item.active {\n          background-color: var(--bg-accent, #3b82f6);\n          color: white;\n        }\n        \n        /* 依存関係レベルごとの字下げ */\n        .cte-tree-item[data-level="0"] {\n          font-weight: 600;\n          color: var(--text-primary, #111827);\n        }\n        \n        .cte-tree-item[data-level="1"] {\n          margin-left: 16px;\n        }\n        \n        .cte-tree-item[data-level="2"] {\n          margin-left: 32px;\n        }\n        \n        .cte-tree-item[data-level="3"] {\n          margin-left: 48px;\n        }\n        \n        .cte-tree-item[data-level="4"] {\n          margin-left: 64px;\n        }\n        \n        .cte-tree-icon {\n          margin-right: 6px;\n          font-size: 14px;\n          font-family: monospace;\n          font-weight: bold;\n        }\n        \n        .cte-tree-name {\n          font-weight: 500;\n          color: var(--text-primary, #111827);\n          flex: 1;\n        }\n        \n        .cte-tree-item.active .cte-tree-name {\n          color: white;\n        }\n        \n        .cte-tree-item:hover:not(.active) .cte-tree-name {\n          color: var(--text-accent, #3b82f6);\n        }\n        \n        .empty-workspace {\n          padding: 16px 8px;\n          text-align: center;\n          color: var(--text-muted, #6b7280);\n          font-style: italic;\n        }\n        \n        /* SQL Validation Styles */\n        .validation-status {\n          margin-left: 4px;\n          font-size: 12px;\n          font-weight: bold;\n        }\n        \n        .validation-status.valid {\n          color: #10b981;\n        }\n        \n        .validation-status.invalid {\n          color: #ef4444;\n        }\n        \n        .validation-status.pending {\n          color: #f59e0b;\n        }\n        \n        .validation-error {\n          font-size: 13px;\n          color: #e5e7eb;\n          margin-left: 20px;\n          margin-top: 2px;\n          background: #1f2937;\n          padding: 6px 8px;\n          border-radius: 0;\n          border-left: 3px solid #ef4444;\n          white-space: pre-wrap;\n          word-break: break-word;\n          font-family: \'Monaco\', \'Menlo\', \'Ubuntu Mono\', monospace;\n          line-height: 1.4;\n        }\n        \n        .validation-controls {\n          display: flex;\n          align-items: center;\n          gap: 8px;\n          margin-bottom: 8px;\n        }\n        \n        .validate-button {\n          background: var(--bg-accent, #3b82f6);\n          color: white;\n          border: none;\n          padding: 4px 8px;\n          border-radius: 4px;\n          font-size: 12px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .validate-button:hover {\n          background: #2563eb;\n        }\n        \n        .validate-button:disabled {\n          background: #9ca3af;\n          cursor: not-allowed;\n        }\n        \n        .validation-summary {\n          font-size: 11px;\n          color: var(--text-muted, #6b7280);\n        }\n      </style>\n    '}renderContent(){return`\n      <div class="workspace-panel-content">\n        ${this.renderSections()}\n      </div>\n    `}renderSections(){let e="";e+=this.renderWorkspaceSection();for(const[n,t]of this.sections)this.config.defaultSections.includes(n)||(e+=this.renderCustomSection(n,t));return e}renderWorkspaceSection(){return`\n      <div class="workspace-section ${this.getSectionState("workspace")?"collapsed":""}" data-section="workspace">\n        <div class="workspace-header">\n          <span>Workspace</span>\n          <span class="collapse-icon">▶</span>\n        </div>\n        <div class="workspace-content">\n          ${this.renderValidationControls()}\n          ${this.renderCTEDependencyTreeWithValidation()}\n        </div>\n      </div>\n    `}renderCustomSection(e,n){return`\n      <div class="workspace-section ${n.collapsed?"collapsed":""}" data-section="${e}">\n        <div class="workspace-header">\n          <span>${n.title}</span>\n          ${n.collapsible?'<span class="collapse-icon">▶</span>':""}\n        </div>\n        <div class="workspace-content">\n          ${n.content}\n        </div>\n      </div>\n    `}setupEventListeners(){this.addClickHandler(".workspace-header",(e,n)=>{const t=n.closest(".workspace-section"),a=t.dataset.section;t.classList.toggle("collapsed"),this.saveSectionState(a,t.classList.contains("collapsed"))}),this.addClickHandler(".table-item",(e,n)=>{const t=n.dataset.table;t&&this.handleTableClick(t)}),this.addClickHandler(".cte-item",(e,n)=>{const t=n.dataset.cte;t&&this.handleCteClick(t)}),this.addClickHandler(".cte-tree-item",(e,n)=>{e.preventDefault(),e.stopPropagation();const t=n.dataset.type,a=n.dataset.name,i=n.dataset.cte;"main"===t||"main"===i?this.handleMainQueryClick():"cte"===t&&a?this.handleCteTreeItemClick(a):i&&this.handleCteTreeItemClick(i)})}handleTableClick(e){this.$$(".table-item").forEach(e=>{e.classList.remove("active")});const n=this.$(`[data-table="${e}"]`);n&&n.classList.add("active"),this.triggerCallback("table-click",e)}handleCteClick(e){this.triggerCallback("cte-click",e)}handleMainQueryClick(){if(!this.cteDependencyData)return void console.error("[WorkspacePanelShadow] No CTE dependency data available");const e=(this.cteDependencyData.name||this.cteDependencyData.mainQueryName||this.cteDependencyData.originalFilePath&&this.cteDependencyData.originalFilePath.replace(/\.sql$/i,"")||"main_query")+".sql",n=this.cteDependencyData.decomposedQuery||this.cteDependencyData.mainQuery||"";if(!n)return void console.warn("[WorkspacePanelShadow] No content available for main query");const t=document.getElementById("center-panel-shadow");t&&t.createOrReuseTabForFile?t.createOrReuseTabForFile(e,n,{type:"sql"}):console.error("[WorkspacePanelShadow] Center panel not available or method missing")}handleCteTreeItemClick(e){if(!this.cteDependencyData||!this.cteDependencyData.privateCtes)return void console.warn("[WorkspacePanelShadow] No CTE data available");const n=this.cteDependencyData.privateCtes[e];n?this.openWorkspaceFile(`${e}.cte`,"cte",n.query):console.warn(`[WorkspacePanelShadow] CTE data not found for: ${e}`)}async openWorkspaceFile(e,n,t=null){try{let a=t;if(!a){if(window.fileModelManager){const n=window.fileModelManager.getModelByName(e);n&&(a=n.getContent())}if(!a&&"cte"===n&&this.cteDependencyData&&this.cteDependencyData.privateCtes){const n=e.replace(".cte",""),t=this.cteDependencyData.privateCtes[n];t&&t.query&&(a=t.query)}if(!a&&"main"===n&&this.cteDependencyData&&this.cteDependencyData.mainQuery&&(a=this.cteDependencyData.mainQuery),!a)try{let t=e;"main"===n&&this.cteDependencyData&&this.cteDependencyData.name&&(t=`${this.cteDependencyData.name}.sql`);const i=await fetch(`/api/workspace/${n}/${encodeURIComponent(t)}`);if(i.ok){const e=await i.json();a=e.content||e.query||""}}catch(e){}a||(a=`-- ${e.replace(/\.(sql|cte)$/i,"")}\n-- Content not available`)}const i=document.getElementById("center-panel-shadow");i&&i.createOrReuseTabForFile&&i.createOrReuseTabForFile(e,a,{type:"cte"===n?"private-cte":"sql"})}catch(e){console.error("[WorkspacePanelShadow] Error opening workspace file:",e)}}renderCTEDependencyTree(){if(!this.cteDependencyData||!this.cteDependencyData.privateCtes)return'\n        <div class="empty-workspace">\n          No CTE dependencies to display.<br>\n          Open a SQL file with CTEs to see the dependency tree.\n        </div>\n      ';const e=this.buildCTEDependencyTree(this.cteDependencyData.privateCtes);let n=`\n      <div class="cte-tree-wrapper">\n        <div class="cte-tree-item" data-level="0" data-cte="main">\n          <span class="cte-tree-icon">📝</span>\n          <span class="cte-tree-name">${this.cteDependencyData.mainQueryName||"Main Query"}</span>\n        </div>\n    `;return n+=this.renderCTETreeNodes(e,1),n+="</div>",n}buildCTEDependencyTree(e){if(!e||0===Object.keys(e).length)return{};const n=Object.keys(e),t=new Set;Object.values(e).forEach(e=>{e.dependencies&&e.dependencies.forEach(e=>t.add(e))});const a=n.filter(e=>!t.has(e)),i=(n,t=0)=>{const a=e[n];if(!a)return null;const s={};return a.dependencies&&a.dependencies.length>0&&a.dependencies.forEach(e=>{const n=i(e,t+1);n&&(s[e]=n)}),{name:n,level:t,dependencies:a.dependencies||[],children:s,query:a.query,description:a.description}},s={};return a.forEach(e=>{const n=i(e);n&&(s[e]=n)}),s}renderCTETreeNodes(e,n=1){let t="";return Object.entries(e).forEach(([e,a])=>{t+=`\n        <div class="cte-tree-item" data-level="${n}" data-cte="${e}">\n          <span class="cte-tree-icon">📦</span>\n          <span class="cte-tree-name">${e}</span>\n        </div>\n      `,a.children&&Object.keys(a.children).length>0&&(t+=this.renderCTETreeNodes(a.children,n+1))}),t}updateCTEDependencies(e){this.cteDependencyData=e,this.validationResults=null;const n=this.$('[data-section="workspace"] .workspace-content');n&&(n.innerHTML=this.renderValidationControls()+this.renderCTEDependencyTreeWithValidation())}renderValidationControls(){if(!this.cteDependencyData)return"";const e=this.getValidationSummary();return`\n      <div class="validation-controls">\n        <button class="validate-button" ${this.isValidating?"disabled":""} onclick="this.getRootNode().host.validateWorkspace()">\n          ${this.isValidating?"Validating...":"Validate SQL"}\n        </button>\n        ${e?`<span class="validation-summary">${e}</span>`:""}\n      </div>\n    `}getValidationSummary(){if(!this.validationResults)return"";const e=this.validationResults.filter(e=>e.isValid).length,n=this.validationResults.length,t=n-e;return 0===t?`✅ All ${n} files valid`:`❌ ${t}/${n} files have errors`}async validateWorkspace(){if(!this.isValidating&&this.cteDependencyData){this.isValidating=!0,this.render();try{const e=await fetch("/api/validate-workspace");if(!e.ok)throw new Error(`Validation failed: ${e.status}`);const n=await e.json();this.validationResults=n.results||[],console.log("[WorkspacePanelShadow] Validation completed:",this.validationResults)}catch(e){console.error("[WorkspacePanelShadow] Validation error:",e),this.validationResults=null}finally{this.isValidating=!1,this.render()}}}getValidationResult(e,n){if(!this.validationResults)return null;if("main"===n)return this.validationResults.find(e=>"main"===e.type);const t=e.replace(".cte","").replace(".sql","");return this.validationResults.find(e=>"cte"===e.type&&e.name===t)}renderCTEDependencyTreeWithValidation(){if(!this.cteDependencyData||!this.cteDependencyData.privateCtes)return'\n        <div class="empty-workspace">\n          No CTE dependencies to display.<br>\n          Open a SQL file with CTEs to see the dependency tree.\n        </div>\n      ';const e=this.buildCTEDependencyTree(this.cteDependencyData.privateCtes),n=this.cteDependencyData.mainQueryName||"Main Query";let t=`\n      <div class="cte-tree-wrapper">\n        <div class="cte-tree-item" data-level="0" data-type="main" data-name="${n}">\n          <span class="cte-tree-icon">📝</span>\n          <span class="cte-tree-name">${n}</span>\n          ${this.renderValidationStatus("main",n)}\n        </div>\n        ${this.renderValidationError("main",n)}\n    `;return t+=this.renderCTETreeNodesWithValidation(e,1),t+="</div>",t}renderCTETreeNodesWithValidation(e,n=1){return e&&"object"==typeof e?Object.values(e).map(e=>{const t=e.name;let a=`\n        <div class="cte-tree-item" data-level="${n}" data-type="cte" data-name="${t}">\n          <span class="cte-tree-icon">📦</span>\n          <span class="cte-tree-name">${t}</span>\n          ${this.renderValidationStatus("cte",t)}\n        </div>\n        ${this.renderValidationError("cte",t)}\n      `;return e.children&&"object"==typeof e.children&&Object.keys(e.children).length>0&&(a+=this.renderCTETreeNodesWithValidation(e.children,n+1)),a}).join(""):""}renderValidationStatus(e,n){const t=this.getValidationResult(n,e);return t?t.isValid?'<span class="validation-status valid">✅</span>':'<span class="validation-status invalid">❌</span>':this.validationResults?'<span class="validation-status pending">⏳</span>':""}renderValidationError(e,n){const t=this.getValidationResult(n,e);return t&&!t.isValid&&t.error?`<div class="validation-error">${this.escapeHtml(t.error.trim())}</div>`:""}escapeHtml(e){const n=document.createElement("div");return n.textContent=e,n.innerHTML}updateCtes(e){const n=this.$("#cte-list");if(!n)return;const t=e.map(e=>`\n      <div class="cte-item" data-cte="${e.name}">\n        <span class="cte-icon">🔗</span>\n        <span class="cte-name">${e.name}</span>\n      </div>\n    `).join("");n.innerHTML=t}getSectionState(e){return"true"===localStorage.getItem(`workspace-panel-section-${e}`)}saveSectionState(e,n){localStorage.setItem(`workspace-panel-section-${e}`,n.toString())}getStateToPersist(){return{}}}export class WorkspacePanelShadowElement extends ShadowElementBase{static get componentClass(){return WorkspacePanelShadowComponent}gatherOptions(){return{defaultSections:["workspace"],collapsible:this.getBooleanAttribute("collapsible"),persistState:this.getBooleanAttribute("persist-state")}}setupComponentCallbacks(){["table-click","cte-click","main-query-click"].forEach(e=>{this.component.onCallback(e,n=>{this.dispatchEvent(new CustomEvent(e,{detail:n,bubbles:!0}))})})}exposeComponentAPI(){this.exposeMethods(["updateCtes","updateCTEDependencies","validateWorkspace"])}}"undefined"!=typeof customElements&&customElements.define("workspace-panel-shadow",WorkspacePanelShadowElement),window.WorkspacePanelShadowComponent=WorkspacePanelShadowComponent;