export class CTETreeComponent{constructor(e,t={}){this.container=e,this.privateCtes={},this.onCteClick=t.onCteClick||(()=>{}),this.onMainQueryClick=t.onMainQueryClick||(()=>{}),this.activeCte=null,this.config={showMainQuery:!0,mainQueryIcon:"[MAIN]",cteIcon:"[CTE]",...t}}update(e){this.privateCtes=e.privateCtes||{},this.mainQueryName=e.mainQueryName||"query",this.render()}buildDependencyTree(){const e={};Object.entries(this.privateCtes).forEach(([t,n])=>{Object.values(this.privateCtes).some(e=>e.dependencies&&e.dependencies.includes(t))||(e[t]={children:{},level:0})});const t=(e,n,i=0)=>{const s=this.privateCtes[e];s&&s.dependencies&&s.dependencies.forEach(e=>{n.children[e]={children:{},level:i+1},t(e,n.children[e],i+1)})};return Object.keys(e).forEach(n=>{t(n,e[n])}),e}render(){const e=this.buildDependencyTree();let t="";this.config.showMainQuery&&(t+=this.renderMainQuery()),t+=this.renderTree(e,1),this.container.innerHTML=t,this.attachEventListeners()}renderMainQuery(){return`\n      <div class="cte-tree-item${"main"===this.activeCte?" active":""}" data-level="0" data-cte="main">\n        <span class="cte-tree-icon">${this.config.mainQueryIcon}</span>\n        <span class="cte-tree-name">${this.mainQueryName}</span>\n      </div>\n    `}renderTree(e,t=0){let n="";return Object.entries(e).forEach(([e,i])=>{if(!this.privateCtes[e])return;const s=this.activeCte===e;n+=`\n        <div class="cte-tree-item${s?" active":""}" data-level="${t}" data-cte="${e}">\n          <span class="cte-tree-icon">${this.config.cteIcon}</span>\n          <span class="cte-tree-name">${e}</span>\n        </div>\n      `,Object.keys(i.children).length>0&&(n+=this.renderTree(i.children,t+1))}),n}attachEventListeners(){this.container.querySelectorAll(".cte-tree-item").forEach(e=>{e.addEventListener("click",t=>{t.preventDefault(),t.stopPropagation();const n=e.dataset.cte;this.setActiveCte(n),"main"===n?this.onMainQueryClick():this.onCteClick(n)})})}setActiveCte(e){const t=this.container.querySelector(".cte-tree-item.active");t&&t.classList.remove("active"),this.activeCte=e;const n=this.container.querySelector(`[data-cte="${e}"]`);n&&n.classList.add("active")}expandToCte(e){}getDebugInfo(){return{privateCtes:Object.keys(this.privateCtes),activeCte:this.activeCte,tree:this.buildDependencyTree()}}destroy(){this.container&&(this.container.innerHTML=""),this.privateCtes={},this.activeCte=null}}export class CTETreeElement extends HTMLElement{constructor(){super(),this.component=null}connectedCallback(){this.classList.add("cte-tree"),this.component=new CTETreeComponent(this,{onCteClick:e=>{this.dispatchEvent(new CustomEvent("cte-click",{detail:{cteName:e},bubbles:!0}))},onMainQueryClick:()=>{this.dispatchEvent(new CustomEvent("main-query-click",{bubbles:!0}))}})}disconnectedCallback(){this.component&&this.component.destroy()}updateData(e){this.component&&this.component.update(e)}setActive(e){this.component&&this.component.setActiveCte(e)}}"undefined"!=typeof customElements&&customElements.define("cte-tree",CTETreeElement),window.CTETreeComponent=CTETreeComponent;