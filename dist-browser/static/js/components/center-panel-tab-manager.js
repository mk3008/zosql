import{fileModelManager}from"../models/file-model-manager.js";export class CenterPanelTabManager{constructor(e,t,a={}){this.shadowRoot=e,this.callbacks=new Map,this.tabs=new Map,this.activeTabId=null,this.tabCounter=0,this.tabToModelMap=new Map,this.modelToTabMap=new Map,this.monacoEditors=new Map,this.config={maxTabs:15,enableScrolling:!0,...a},this.state={scrollPosition:0}}renderTabs(){return 0===this.tabs.size?"":Array.from(this.tabs.values()).map(e=>`\n        <div class="tab${e.id===this.activeTabId?" active":""}" data-tab-id="${e.id}">\n          <span class="tab-name" title="${e.name}">${this.getTabEmoji(e)} ${this.getDisplayName(e)}</span>\n          ${e.closable?`<span class="tab-close" data-tab-id="${e.id}">×</span>`:""}\n        </div>\n      `).join("")}getTabEmoji(e){return console.log("[TabManager] Tab classification:",{name:e.name,type:e.type}),"shared-cte"===e.type||"private-cte"===e.type?"📦":("main-file"===e.type||e.type,"📝")}getDisplayName(e){return e.name&&e.name.endsWith(".cte")?e.name.replace(".cte",""):e.name}setupTabScrolling(){const e=this.shadowRoot.getElementById("scroll-left"),t=this.shadowRoot.getElementById("scroll-right"),a=this.shadowRoot.getElementById("tab-list");e&&t&&a&&(e.addEventListener("click",()=>this.scrollTabs(-120)),t.addEventListener("click",()=>this.scrollTabs(120)),this.updateScrollButtons())}setupTabWheelScroll(){const e=this.shadowRoot.getElementById("tab-scroll-container");e&&e.addEventListener("wheel",e=>{e.preventDefault(),this.scrollTabs(e.deltaY>0?60:-60)})}scrollTabs(e){const t=this.shadowRoot.getElementById("tab-scroll-container"),a=this.shadowRoot.getElementById("tab-list");if(!t||!a)return;const o=t.offsetWidth,s=a.scrollWidth,i=Math.max(0,s-o);this.state.scrollPosition+=e,this.state.scrollPosition=Math.max(0,Math.min(i,this.state.scrollPosition)),a&&(a.style.transform=`translateX(-${this.state.scrollPosition}px)`,this.updateScrollButtons())}updateScrollButtons(){const e=this.shadowRoot.getElementById("tab-scroll-container"),t=this.shadowRoot.getElementById("tab-list"),a=this.shadowRoot.getElementById("scroll-left"),o=this.shadowRoot.getElementById("scroll-right");if(!(e&&t&&a&&o))return;const s=e.offsetWidth,i=t.scrollWidth,n=i>s;a.classList.toggle("visible",n),o.classList.toggle("visible",n),a.disabled=this.state.scrollPosition<=0,o.disabled=this.state.scrollPosition>=i-s}setupKeyboardShortcuts(){document.addEventListener("keydown",e=>{if(e.ctrlKey||e.metaKey)switch(e.key){case"t":e.preventDefault(),this.createNewTab();break;case"w":this.activeTabId&&(e.preventDefault(),this.closeTab(this.activeTabId))}})}createNewTab(e={}){let t;if(e.fileName&&e.content)t=fileModelManager.getModelByName(e.fileName)||fileModelManager.createOrGetModel(e.fileName,e.content,{type:e.type||"sql"});else{const a=e.name||`Query ${this.tabCounter+1}`;t=fileModelManager.createOrGetModel(a,e.content||"",{type:e.type||"sql"})}const a={id:"tab-"+ ++this.tabCounter,name:e.name||t.getTabName(),type:e.type||"sql",modelId:t.id,closable:!1!==e.closable,created:new Date,...e};return this.tabs.set(a.id,a),this.tabToModelMap.set(a.id,t.id),this.modelToTabMap.set(t.id,a.id),fileModelManager.setActiveModel(t.id),this.setActiveTab(a.id),this.callbacks.has("tab-rerender-needed")&&this.triggerCallback("tab-rerender-needed"),this.callbacks.has("tab-created")&&this.triggerCallback("tab-created",{tabId:a.id,tab:a,fileModel:t}),a.id}createDefaultTab(){return 0===this.tabs.size?this.createNewTab({name:"Demo",type:"sql",content:"-- Welcome to zosql Browser!\n--\n-- No table setup needed.\n-- Define structure and data in the Values panel on the right.\n--\n-- Try pressing Ctrl+Enter to execute this query!\n--\n-- Shortcuts:\n--   Ctrl+Enter: Execute SQL\n--   Ctrl+Shift+F: Format SQL\n\nselect * from users"}):null}findTabByName(e){for(const[t,a]of this.tabs)if(a.name===e)return{id:t,tab:a};return null}createOrReuseTabForFile(e,t,a={}){const o=e.replace(/\.(sql|SQL)$/,""),s=this.findTabByName(o);return s?(console.log(`[TabManager] Reusing existing tab: ${o}`),this.setActiveTab(s.id),s.id):(console.log(`[TabManager] Creating new tab for file: ${e}`),this.createNewTab({name:o,fileName:e,content:t,type:a.type||"sql",...a}))}getFileModelForTab(e){const t=this.tabToModelMap.get(e);return t?fileModelManager.getModel(t):null}getTabForFileModel(e){return this.modelToTabMap.get(e)}updateTabContent(e,t,a="user"){const o=this.getFileModelForTab(e);if(!o)return console.warn(`[TabManager] No file model found for tab: ${e}`),!1;const s=o.updateContent(t,a);if(s){const o=this.monacoEditors.get(e);o&&"monaco"!==a&&o.setValue(t),this.updateTabModificationState(e)}return s}updateTabModificationState(e){const t=this.tabs.get(e),a=this.getFileModelForTab(e);if(!t||!a)return;const o=this.shadowRoot.querySelector(`[data-tab-id="${e}"]`),s=o?.querySelector(".tab-name");if(s){const e=a.getTabName();s.textContent=a.hasChanges()?`${e} •`:e,s.title=a.hasChanges()?`${e} (modified)`:e}}closeTab(e){console.log("[TabManager] closeTab called:",e);const t=this.tabs.get(e);if(console.log("[TabManager] tab found:",!!t,"closable:",t?.closable),!t||!t.closable)return console.log("[TabManager] closeTab early return - tab not found or not closable"),!1;const a=this.tabToModelMap.get(e);if(a){const o=fileModelManager.getModel(a);if(o&&o.hasChanges()&&console.warn(`[TabManager] Closing tab with unsaved changes: ${t.name}`),this.tabToModelMap.delete(e),this.modelToTabMap.delete(a),!Array.from(this.tabToModelMap.values()).includes(a)){const e=fileModelManager.getModel(a);e&&(e.name.endsWith(".cte")||e.name.includes("user_behavior_analysis")||e.name.includes("query")||"workspace"===e.type)?console.log(`[TabManager] Preserving workspace file model: ${e.name}`):fileModelManager.removeModel(a)}}const o=this.monacoEditors.get(e);console.log(`[TabManager] Closing tab ${e}, editor exists: ${!!o}`),o&&(o.dispose(),this.monacoEditors.delete(e),console.log(`[TabManager] Disposed Monaco Editor for tab ${e}`));const s=document.getElementById(`monaco-external-${e}`);s&&(console.log(`[TabManager] Removing external container for tab ${e}`),s.remove());let i=this.activeTabId;if(this.activeTabId===e){const t=Array.from(this.tabs.keys()),a=t.indexOf(e);i=a<t.length-1?t[a+1]:a>0?t[a-1]:null;const o=this.activeTabId;if(console.log(`[TabManager] Active tab will change from ${o} to ${i} (closed tab was at index ${a})`),this.activeTabId=i,this.activeTabId){const e=this.tabToModelMap.get(this.activeTabId);e&&fileModelManager.setActiveModel(e)}}return this.tabs.delete(e),console.log("[TabManager] Triggering tab-closed callback:",{tabId:e,tab:t.name,needsRerender:!0}),this.triggerCallback("tab-closed",{tabId:e,tab:t,needsRerender:!0}),console.log("[TabManager] Tab closed successfully:",e),!0}setActiveTab(e){if(!this.tabs.has(e))return!1;const t=this.activeTabId;this.activeTabId=e,console.log(`[TabManager] setActiveTab: ${t} → ${e}`);const a=this.tabToModelMap.get(e);return a&&fileModelManager.setActiveModel(a),t!==e&&this.triggerCallback("tab-changed",{tabId:e,tab:this.tabs.get(e),fileModel:this.getFileModelForTab(e),previousTabId:t}),!0}getActiveTab(){return this.activeTabId?this.tabs.get(this.activeTabId):null}getAllTabs(){return Array.from(this.tabs.values())}getTabCount(){return this.tabs.size}hasTab(e){return this.tabs.has(e)}setMonacoEditor(e,t){this.monacoEditors.set(e,t)}getMonacoEditor(e){return this.monacoEditors.get(e)}syncActiveMonacoEditor(){if(!this.activeTabId)return;console.log(`[TabManager] Syncing Monaco Editor for active tab: ${this.activeTabId}`);const e=document.getElementById(`monaco-external-${this.activeTabId}`);if(!e)return void console.warn(`[TabManager] External container not found for active tab: ${this.activeTabId}`);const t=this.monacoEditors.get(this.activeTabId);if(!t)return void console.warn(`[TabManager] Monaco Editor instance not found for active tab: ${this.activeTabId}`);"none"===e.style.display&&(console.log(`[TabManager] Making external container visible for tab: ${this.activeTabId}`),e.style.display="block");const a=this.shadowRoot.getElementById(`editor-${this.activeTabId}`);a&&a.positionSync&&(console.log(`[TabManager] Executing position sync for tab: ${this.activeTabId}`),a.positionSync()),setTimeout(()=>{t&&(t.layout(),console.log(`[TabManager] Monaco Editor layout updated for tab: ${this.activeTabId}`))},50)}triggerCallback(e,t=null){console.log("[TabManager] triggerCallback called:",e,"callbacks has:",this.callbacks.has(e));const a=this.callbacks.get(e);a?(console.log("[TabManager] Executing callback for:",e),a(t)):console.log("[TabManager] No callback found for:",e)}destroy(){this.tabs.clear(),this.tabToModelMap.clear(),this.modelToTabMap.clear(),this.monacoEditors.forEach(e=>{e&&e.dispose&&e.dispose()}),this.monacoEditors.clear(),console.log("[TabManager] Destroyed")}}