import{ShadowComponentBase,ShadowElementBase}from"./base/shadow-component-base.js";export class MonacoEditorShadowComponent extends ShadowComponentBase{beforeInit(){this.editor=null,this.isInitialized=!1}getDefaultConfig(){return{language:"sql",theme:"vs-dark",fontSize:14,tabSize:4,wordWrap:"off",minimap:{enabled:!1},scrollBeyondLastLine:!1,automaticLayout:!0,selectOnLineNumbers:!0,roundedSelection:!1,readOnly:!1,cursorStyle:"line",cursorBlinking:"blink"}}getEventPrefix(){return"monaco-editor"}getStyles(){return"\n      <style>\n        :host {\n          display: block;\n          width: 100%;\n          height: 100%;\n          position: relative;\n          background: #1e1e1e;\n          font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n        }\n        \n        .editor-container {\n          width: 100%;\n          height: 100%;\n          position: relative;\n          background: #1e1e1e;\n        }\n        \n        .editor-loading {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          width: 100%;\n          height: 100%;\n          background: #1e1e1e;\n          color: #cccccc;\n          font-size: 14px;\n        }\n        \n        .loading-spinner {\n          display: inline-block;\n          width: 20px;\n          height: 20px;\n          border: 2px solid transparent;\n          border-top-color: #007acc;\n          border-radius: 50%;\n          animation: spin 1s linear infinite;\n          margin-right: 10px;\n        }\n        \n        @keyframes spin {\n          to { transform: rotate(360deg); }\n        }\n        \n        /* Monaco Editor エラーメッセージ */\n        .editor-error {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          width: 100%;\n          height: 100%;\n          background: #1e1e1e;\n          color: #f44747;\n          font-size: 14px;\n          text-align: center;\n          padding: 20px;\n          box-sizing: border-box;\n        }\n        \n        .error-message {\n          max-width: 400px;\n        }\n      </style>\n    "}renderContent(){return'\n      <div class="editor-container" id="editor-container">\n        <div class="editor-loading" id="editor-loading">\n          <div class="loading-spinner"></div>\n          Initializing Monaco Editor...\n        </div>\n      </div>\n    '}afterInit(){this.initializeMonacoEditor()}initializeMonacoEditor(){"undefined"==typeof monaco?void 0!==window.monacoLoaded&&window.monacoLoaded?this.createEditor():window.addEventListener("monaco-loaded",()=>{this.createEditor()}):this.createEditor()}createEditor(){try{const t=this.$("#editor-container"),e=this.$("#editor-loading");if(!t)return void console.error("[MonacoEditorShadow] Editor container not found");e&&e.remove(),this.editor=monaco.editor.create(t,{value:this.config.initialValue||"-- SQL Editor",language:this.config.language,theme:this.config.theme,fontSize:this.config.fontSize,tabSize:this.config.tabSize,wordWrap:this.config.wordWrap,minimap:this.config.minimap,scrollBeyondLastLine:this.config.scrollBeyondLastLine,automaticLayout:this.config.automaticLayout,selectOnLineNumbers:this.config.selectOnLineNumbers,roundedSelection:this.config.roundedSelection,readOnly:this.config.readOnly,cursorStyle:this.config.cursorStyle,cursorBlinking:this.config.cursorBlinking}),this.isInitialized=!0,this.setupEditorEventListeners(),console.log("[MonacoEditorShadow] Editor initialized successfully"),this.triggerCallback("initialized",{editor:this.editor})}catch(t){console.error("[MonacoEditorShadow] Failed to create editor:",t),this.showError("Failed to initialize Monaco Editor: "+t.message)}}setupEditorEventListeners(){this.editor&&(this.editor.onDidChangeModelContent(t=>{this.triggerCallback("content-changed",{value:this.editor.getValue(),changes:t.changes})}),this.editor.onDidChangeCursorPosition(t=>{this.triggerCallback("cursor-changed",{position:t.position,selection:this.editor.getSelection()})}),this.editor.onDidFocusEditorWidget(()=>{this.triggerCallback("focus")}),this.editor.onDidBlurEditorWidget(()=>{this.triggerCallback("blur")}))}showError(t){const e=this.$("#editor-container");e&&(e.innerHTML=`\n        <div class="editor-error">\n          <div class="error-message">${t}</div>\n        </div>\n      `)}getValue(){return this.editor?this.editor.getValue():""}setValue(t){this.editor&&this.editor.setValue(t)}layout(){this.editor&&this.editor.layout()}focus(){this.editor&&this.editor.focus()}getSelection(){return this.editor?this.editor.getSelection():null}setSelection(t){this.editor&&t&&this.editor.setSelection(t)}getPosition(){return this.editor?this.editor.getPosition():null}setPosition(t){this.editor&&t&&this.editor.setPosition(t)}setLanguage(t){if(this.editor){const e=this.editor.getModel();e&&monaco.editor.setModelLanguage(e,t)}}setTheme(t){this.editor&&monaco.editor.setTheme(t)}beforeDestroy(){this.editor&&(this.editor.dispose(),this.editor=null),this.isInitialized=!1}}export class MonacoEditorShadowElement extends ShadowElementBase{static get componentClass(){return MonacoEditorShadowComponent}gatherOptions(){return{language:this.getAttributeOrDefault("language","sql"),theme:this.getAttributeOrDefault("theme","vs-dark"),fontSize:this.getNumberAttribute("font-size",14),tabSize:this.getNumberAttribute("tab-size",4),wordWrap:this.getAttributeOrDefault("word-wrap","off"),readOnly:this.getBooleanAttribute("read-only"),initialValue:this.getAttributeOrDefault("initial-value","")}}setupComponentCallbacks(){["initialized","content-changed","cursor-changed","focus","blur"].forEach(t=>{this.component.onCallback(t,e=>{this.dispatchEvent(new CustomEvent(t,{detail:e,bubbles:!0}))})})}exposeComponentAPI(){this.exposeMethods(["getValue","setValue","layout","focus","getSelection","setSelection","getPosition","setPosition","setLanguage","setTheme"]),Object.defineProperty(this,"editor",{get:()=>this.component?.editor})}}"undefined"!=typeof customElements&&customElements.define("monaco-editor-shadow",MonacoEditorShadowElement),window.MonacoEditorShadowComponent=MonacoEditorShadowComponent;