export class CenterPanelSplitterManager{constructor(t,e=new Map,i={}){this.shadowRoot=t,this.callbacks=e,this.config={defaultSplitRatio:.6,minRatio:.2,maxRatio:.8,...i},this.state={splitterPosition:this.config.defaultSplitRatio,isDragging:!1,dragStartY:0,dragStartRatio:0}}setupSplitter(){this.shadowRoot.addEventListener("mousedown",t=>{t.target.classList.contains("splitter")&&this.startSplitterDrag(t)}),document.addEventListener("mousemove",t=>{this.state.isDragging&&this.handleSplitterDrag(t)}),document.addEventListener("mouseup",()=>{this.state.isDragging&&this.endSplitterDrag()})}startSplitterDrag(t){this.state.isDragging=!0,this.state.dragStartY=t.clientY,this.state.dragStartRatio=this.state.splitterPosition,t.target.classList.add("dragging"),document.body.style.cursor="ns-resize",document.body.style.userSelect="none",this.triggerCallback("splitter-drag-start",{startY:this.state.dragStartY,startRatio:this.state.dragStartRatio})}handleSplitterDrag(t){if(!this.state.isDragging)return;const e=this.shadowRoot.querySelector(".tab-content.active .split-layout");if(!e)return;const i=e.offsetHeight,s=t.clientY-this.state.dragStartY,a=s/i;let o=this.state.dragStartRatio+a;o=Math.max(this.config.minRatio,Math.min(this.config.maxRatio,o)),this.state.splitterPosition=o,this.updateSplitterLayout(),this.triggerCallback("splitter-dragging",{currentRatio:o,deltaY:s})}endSplitterDrag(){this.state.isDragging=!1;const t=this.shadowRoot.querySelector(".splitter.dragging");t&&t.classList.remove("dragging"),document.body.style.cursor="",document.body.style.userSelect="",this.saveState(),this.triggerCallback("splitter-drag-end",{finalRatio:this.state.splitterPosition})}updateSplitterLayout(){const t=this.shadowRoot.querySelector(".tab-content.active");if(!t)return;const e=t.querySelector(".editor-section"),i=t.querySelector(".results-section");if(e&&i){const t=100*this.state.splitterPosition,s=100*(1-this.state.splitterPosition);e.style.height=`${t}%`,i.style.height=`${s}%`,this.triggerCallback("splitter-layout-updated",{editorHeight:t,resultsHeight:s})}}setSplitterPosition(t){return t<this.config.minRatio||t>this.config.maxRatio?(console.warn(`[SplitterManager] Invalid ratio ${t}, must be between ${this.config.minRatio} and ${this.config.maxRatio}`),!1):(this.state.splitterPosition=t,this.updateSplitterLayout(),this.saveState(),!0)}getSplitterPosition(){return this.state.splitterPosition}resetSplitterPosition(){this.state.splitterPosition=this.config.defaultSplitRatio,this.updateSplitterLayout(),this.saveState(),this.triggerCallback("splitter-reset",{ratio:this.state.splitterPosition})}saveState(){const t={splitterPosition:this.state.splitterPosition};try{const e={...JSON.parse(localStorage.getItem("center-panel-state")||"{}"),...t};localStorage.setItem("center-panel-state",JSON.stringify(e))}catch(t){console.warn("[SplitterManager] Failed to save state:",t)}}loadState(){try{const t=localStorage.getItem("center-panel-state");if(t){const e=JSON.parse(t);void 0!==e.splitterPosition&&(this.state.splitterPosition=Math.max(this.config.minRatio,Math.min(this.config.maxRatio,e.splitterPosition)))}}catch(t){console.warn("[SplitterManager] Failed to load state:",t),this.state.splitterPosition=this.config.defaultSplitRatio}}setEnabled(t){this.shadowRoot.querySelectorAll(".splitter").forEach(e=>{t?(e.style.cursor="ns-resize",e.style.pointerEvents="auto",e.removeAttribute("disabled")):(e.style.cursor="default",e.style.pointerEvents="none",e.setAttribute("disabled","true"))})}debugSplitter(){console.log("[SplitterManager] Debug Splitter:"),console.log("  - Current position:",this.state.splitterPosition),console.log("  - Is dragging:",this.state.isDragging),console.log("  - Config:",this.config),console.log("  - Active layout:",!!this.shadowRoot.querySelector(".tab-content.active .split-layout"));const t=this.shadowRoot.querySelectorAll(".splitter");console.log("  - Splitter elements:",t.length)}triggerCallback(t,e=null){const i=this.callbacks.get(t);i&&i(e)}destroy(){this.state.isDragging&&this.endSplitterDrag(),document.body.style.cursor="",document.body.style.userSelect="",console.log("[SplitterManager] Destroyed")}}